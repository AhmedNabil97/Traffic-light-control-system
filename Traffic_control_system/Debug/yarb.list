
yarb.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002548  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002704  08002704  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08002704  08002704  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002704  08002704  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800270c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000098  080027a4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  080027a4  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007742  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000136f  00000000  00000000  00027803  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001734  00000000  00000000  00028b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000398  00000000  00000000  0002a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000300  00000000  00000000  0002a640  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00004150  00000000  00000000  0002a940  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003a41  00000000  00000000  0002ea90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000eabd  00000000  00000000  000324d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00040f8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bdc  00000000  00000000  0004100c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000098 	.word	0x20000098
 800014c:	00000000 	.word	0x00000000
 8000150:	08002660 	.word	0x08002660

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000009c 	.word	0x2000009c
 800016c:	08002660 	.word	0x08002660

08000170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	2b00      	cmp	r3, #0
 8000182:	db0a      	blt.n	800019a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	b2da      	uxtb	r2, r3
 8000188:	490c      	ldr	r1, [pc, #48]	; (80001bc <__NVIC_SetPriority+0x4c>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	0152      	lsls	r2, r2, #5
 8000190:	b2d2      	uxtb	r2, r2
 8000192:	440b      	add	r3, r1
 8000194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000198:	e00a      	b.n	80001b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	b2da      	uxtb	r2, r3
 800019e:	4908      	ldr	r1, [pc, #32]	; (80001c0 <__NVIC_SetPriority+0x50>)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	f003 030f 	and.w	r3, r3, #15
 80001a6:	3b04      	subs	r3, #4
 80001a8:	0152      	lsls	r2, r2, #5
 80001aa:	b2d2      	uxtb	r2, r2
 80001ac:	440b      	add	r3, r1
 80001ae:	761a      	strb	r2, [r3, #24]
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000e100 	.word	0xe000e100
 80001c0:	e000ed00 	.word	0xe000ed00

080001c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001d4:	d301      	bcc.n	80001da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001d6:	2301      	movs	r3, #1
 80001d8:	e00f      	b.n	80001fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001da:	4a0a      	ldr	r2, [pc, #40]	; (8000204 <SysTick_Config+0x40>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3b01      	subs	r3, #1
 80001e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001e2:	2107      	movs	r1, #7
 80001e4:	f04f 30ff 	mov.w	r0, #4294967295
 80001e8:	f7ff ffc2 	bl	8000170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <SysTick_Config+0x40>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <SysTick_Config+0x40>)
 80001f4:	2207      	movs	r2, #7
 80001f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	e000e010 	.word	0xe000e010

08000208 <HardFault_Handler>:


#include "Cortex_MX_OS_Porting.h"

void HardFault_Handler(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	while(1);
 800020c:	e7fe      	b.n	800020c <HardFault_Handler+0x4>

0800020e <MemManage_Handler>:
}
void	MemManage_Handler(void)
{
 800020e:	b480      	push	{r7}
 8000210:	af00      	add	r7, sp, #0
	while(1);
 8000212:	e7fe      	b.n	8000212 <MemManage_Handler+0x4>

08000214 <BusFault_Handler>:

}

void	BusFault_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	while(1);
 8000218:	e7fe      	b.n	8000218 <BusFault_Handler+0x4>

0800021a <UsageFault_Handler>:

}
void	UsageFault_Handler(void)
{
 800021a:	b480      	push	{r7}
 800021c:	af00      	add	r7, sp, #0
	while(1);
 800021e:	e7fe      	b.n	800021e <UsageFault_Handler+0x4>

08000220 <SVC_Handler>:

}
__attribute__((naked))   void SVC_Handler()
{

	__asm("TST LR , 0x4 ");
 8000220:	f01e 0f04 	tst.w	lr, #4
	__asm("ITE EQ");
 8000224:	bf0c      	ite	eq
	__asm("MRSEQ R0 , MSP");
 8000226:	f3ef 8008 	mrseq	r0, MSP
	__asm("MRSNE R0 , PSP");
 800022a:	f3ef 8009 	mrsne	r0, PSP
	__asm("b service_handler");   //higher piriority than pendsvtherefore isr will not get executed till svc isr finish
 800022e:	f000 bb09 	b.w	8000844 <service_handler>

}
 8000232:	bf00      	nop

08000234 <HW_INIT>:



void HW_INIT()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	// 1 TICK = 125 NanoSec
	// X COUNT = 1 MS.
	// X = 8000 COUNTS
	// We will configure our timer to generate interrupt every 1 MS to apply our scheduler algorithm.
	//make pendsv piriority = systick to ensure avoid conflecting
	NVIC_SetPriority(PendSV_IRQn , 15);
 8000238:	210f      	movs	r1, #15
 800023a:	f06f 0001 	mvn.w	r0, #1
 800023e:	f7ff ff97 	bl	8000170 <__NVIC_SetPriority>

	}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}

08000246 <OS_start_ticker>:
void OS_start_ticker()
{
 8000246:	b580      	push	{r7, lr}
 8000248:	af00      	add	r7, sp, #0
	SysTick_Config(16000);        //no of ticks between each 2 interrupts ------------> 32000 = 4ms.
 800024a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800024e:	f7ff ffb9 	bl	80001c4 <SysTick_Config>
	}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}

08000256 <Fifo_init>:


#include "Nabil_RTOS_FIFO.h"

Fifo_status_t Fifo_init(Fifo_Buffer*p,void*address,int length)
{
 8000256:	b480      	push	{r7}
 8000258:	b085      	sub	sp, #20
 800025a:	af00      	add	r7, sp, #0
 800025c:	60f8      	str	r0, [r7, #12]
 800025e:	60b9      	str	r1, [r7, #8]
 8000260:	607a      	str	r2, [r7, #4]
	if(address == null)
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d101      	bne.n	800026c <Fifo_init+0x16>
		return Fifo_null;
 8000268:	2303      	movs	r3, #3
 800026a:	e00f      	b.n	800028c <Fifo_init+0x36>
	p->base = address;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	601a      	str	r2, [r3, #0]
	p->head = address;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	68ba      	ldr	r2, [r7, #8]
 8000276:	605a      	str	r2, [r3, #4]
	p->tail = address;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	609a      	str	r2, [r3, #8]
	p->count =0;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2200      	movs	r2, #0
 8000282:	60da      	str	r2, [r3, #12]
	p->length = length;
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	611a      	str	r2, [r3, #16]
	return Fifo_no_error;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr

08000296 <Fifo_add_item>:
Fifo_status_t Fifo_add_item(Fifo_Buffer*p,data_type x)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	6039      	str	r1, [r7, #0]
	if(p->base == null)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d101      	bne.n	80002ac <Fifo_add_item+0x16>
	{
		return Fifo_null;
 80002a8:	2303      	movs	r3, #3
 80002aa:	e026      	b.n	80002fa <Fifo_add_item+0x64>
	}
	if(p->count == p->length)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	68da      	ldr	r2, [r3, #12]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	691b      	ldr	r3, [r3, #16]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d101      	bne.n	80002bc <Fifo_add_item+0x26>
	{
		return Fifo_full;
 80002b8:	2301      	movs	r3, #1
 80002ba:	e01e      	b.n	80002fa <Fifo_add_item+0x64>

	}
	  if((data_type*)p->tail - (data_type*)p->base == p->length)                    // apply circular principle
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	461a      	mov	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	109b      	asrs	r3, r3, #2
 80002ca:	461a      	mov	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d103      	bne.n	80002dc <Fifo_add_item+0x46>
		     {
		    	 p->tail = p->base;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	609a      	str	r2, [r3, #8]
		     }
            *((data_type*)(p->tail)) = x;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	601a      	str	r2, [r3, #0]
			p->tail = (data_type*)p->tail +1;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	1d1a      	adds	r2, r3, #4
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	609a      	str	r2, [r3, #8]
			p->count ++;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	1c5a      	adds	r2, r3, #1
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	60da      	str	r2, [r3, #12]
	return Fifo_no_error;
 80002f8:	2300      	movs	r3, #0
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <Fifo_get_item>:
data_type Fifo_get_item(Fifo_Buffer*p)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	data_type val;
	if(p->base == null)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d101      	bne.n	8000318 <Fifo_get_item+0x14>
		return Null;
 8000314:	2300      	movs	r3, #0
 8000316:	e030      	b.n	800037a <Fifo_get_item+0x76>
	if(p->count == 0)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d101      	bne.n	8000324 <Fifo_get_item+0x20>
		return Null;
 8000320:	2300      	movs	r3, #0
 8000322:	e02a      	b.n	800037a <Fifo_get_item+0x76>
	if( ((data_type*)p->head) - ((data_type*)p->base) == p->length-1 )              //read last element
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	461a      	mov	r2, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	1ad3      	subs	r3, r2, r3
 8000330:	109b      	asrs	r3, r3, #2
 8000332:	461a      	mov	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	691b      	ldr	r3, [r3, #16]
 8000338:	3b01      	subs	r3, #1
 800033a:	429a      	cmp	r2, r3
 800033c:	d10e      	bne.n	800035c <Fifo_get_item+0x58>
			{
		        val = *((data_type*)(p->head));
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	60fb      	str	r3, [r7, #12]
				p->head = p->base;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]
				p->count--;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	68db      	ldr	r3, [r3, #12]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	60da      	str	r2, [r3, #12]
				return val;
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	e00e      	b.n	800037a <Fifo_get_item+0x76>
			}
			p->count--;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	1e5a      	subs	r2, r3, #1
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	60da      	str	r2, [r3, #12]
			 val = *((data_type*)(p->head));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	60fb      	str	r3, [r7, #12]
			p->head = (data_type*)p->head +1;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	1d1a      	adds	r2, r3, #4
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	605a      	str	r2, [r3, #4]
	return val;
 8000378:	68fb      	ldr	r3, [r7, #12]
}
 800037a:	4618      	mov	r0, r3
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <idle_task_funtion>:



//====================================================== non user functions==============================================================================
void idle_task_funtion()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	while(1)
	{
		if(number_of_active_requests != 0 && !t2_status)
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <idle_task_funtion+0x38>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	2b00      	cmp	r3, #0
 8000390:	d00a      	beq.n	80003a8 <idle_task_funtion+0x24>
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <idle_task_funtion+0x3c>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b2db      	uxtb	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d105      	bne.n	80003a8 <idle_task_funtion+0x24>
		{
			t2_status =1;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <idle_task_funtion+0x3c>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]
			Nabil_Activate_task(&t2);
 80003a2:	4808      	ldr	r0, [pc, #32]	; (80003c4 <idle_task_funtion+0x40>)
 80003a4:	f000 fbc6 	bl	8000b34 <Nabil_Activate_task>
		}
		idle_flag ^= 1;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <idle_task_funtion+0x44>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	f083 0301 	eor.w	r3, r3, #1
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <idle_task_funtion+0x44>)
 80003b4:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 80003b6:	bf20      	wfe
		if(number_of_active_requests != 0 && !t2_status)
 80003b8:	e7e6      	b.n	8000388 <idle_task_funtion+0x4>
 80003ba:	bf00      	nop
 80003bc:	200000d0 	.word	0x200000d0
 80003c0:	200000c4 	.word	0x200000c4
 80003c4:	20000510 	.word	0x20000510
 80003c8:	200000b4 	.word	0x200000b4

080003cc <My_RTOS_Create_MainStack>:
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------

void My_RTOS_Create_MainStack()
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	OS_control._S_MSP = ((unsigned int) &_estack);
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <My_RTOS_Create_MainStack+0x34>)
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <My_RTOS_Create_MainStack+0x38>)
 80003d4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_control._E_MSP = OS_control._S_MSP - 3072 ;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <My_RTOS_Create_MainStack+0x38>)
 80003da:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80003de:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <My_RTOS_Create_MainStack+0x38>)
 80003e4:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	// align stack with 8 bytes & set PSP for tasks.
	OS_control.sp_locater = OS_control._E_MSP - 8 ;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <My_RTOS_Create_MainStack+0x38>)
 80003ea:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80003ee:	3b08      	subs	r3, #8
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <My_RTOS_Create_MainStack+0x38>)
 80003f2:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20002800 	.word	0x20002800
 8000404:	200000dc 	.word	0x200000dc

08000408 <Nabil_Rtos_create_task_stack>:

//-------------------------------------------------------------------------------------------------------------------------------------------------------

enum RTOS_ERROR Nabil_Rtos_create_task_stack(task_ref*p)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	 * R1
	 * R0
	 *================== my frame ======================================
	 * stacking for r4-r11
	 */
	p->current_PSP = p->_S_PSP_task;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	461a      	mov	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	615a      	str	r2, [r3, #20]
	p->current_PSP --;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	1f1a      	subs	r2, r3, #4
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	615a      	str	r2, [r3, #20]
	*(p->current_PSP) = 0x1000000;                        //Dummy value for initialization of XPSR b24 should be = 1 ass it works in thumb state
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800042c:	601a      	str	r2, [r3, #0]
	p->current_PSP --;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	1f1a      	subs	r2, r3, #4
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	615a      	str	r2, [r3, #20]
	*(p->current_PSP) = (unsigned int)p->ptr_to_task;     //PC value will be loaded by task function
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689a      	ldr	r2, [r3, #8]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	601a      	str	r2, [r3, #0]
	p->current_PSP --;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	1f1a      	subs	r2, r3, #4
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	615a      	str	r2, [r3, #20]
	*(p->current_PSP) = 0xFFFFFFFD ;                  //Dummy value to initialize LR ---> Thread , PSP
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f06f 0202 	mvn.w	r2, #2
 8000454:	601a      	str	r2, [r3, #0]
	int i = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
	for(i=0 ; i<13 ; i++)
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	e00b      	b.n	8000478 <Nabil_Rtos_create_task_stack+0x70>
	{
		p->current_PSP --;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	1f1a      	subs	r2, r3, #4
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	615a      	str	r2, [r3, #20]
		*(p->current_PSP) = 0;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
	for(i=0 ; i<13 ; i++)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3301      	adds	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b0c      	cmp	r3, #12
 800047c:	ddf0      	ble.n	8000460 <Nabil_Rtos_create_task_stack+0x58>
	}

	return NO_ERROR;
 800047e:	2300      	movs	r3, #0
}
 8000480:	4618      	mov	r0, r3
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
	...

0800048c <OS_SVC_Set>:
//-----------------------------------------------------------------------------------------------------------------------------------------

void OS_SVC_Set(SVC_ID index)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]

	switch(index)
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	3b01      	subs	r3, #1
 800049a:	2b07      	cmp	r3, #7
 800049c:	d822      	bhi.n	80004e4 <OS_SVC_Set+0x58>
 800049e:	a201      	add	r2, pc, #4	; (adr r2, 80004a4 <OS_SVC_Set+0x18>)
 80004a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a4:	080004c5 	.word	0x080004c5
 80004a8:	080004c9 	.word	0x080004c9
 80004ac:	080004cd 	.word	0x080004cd
 80004b0:	080004d1 	.word	0x080004d1
 80004b4:	080004d5 	.word	0x080004d5
 80004b8:	080004d9 	.word	0x080004d9
 80004bc:	080004dd 	.word	0x080004dd
 80004c0:	080004e1 	.word	0x080004e1
	{
	case Svc_activate_task :
		__asm("SVC #0x1");
 80004c4:	df01      	svc	1
		break;
 80004c6:	e00e      	b.n	80004e6 <OS_SVC_Set+0x5a>
	case Svc_terminate_task :
		__asm("SVC #0x2");
 80004c8:	df02      	svc	2
		break;
 80004ca:	e00c      	b.n	80004e6 <OS_SVC_Set+0x5a>
	case Svc_Task_waiting_time :
		__asm("SVC #0x3");
 80004cc:	df03      	svc	3
		break;
 80004ce:	e00a      	b.n	80004e6 <OS_SVC_Set+0x5a>
	case Svc_piriority_inheritance:
		__asm("SVC #0x4");
 80004d0:	df04      	svc	4
		break;
 80004d2:	e008      	b.n	80004e6 <OS_SVC_Set+0x5a>
	case Svc_Enable_north_south_interrupt :
		__asm("SVC #0x5");
 80004d4:	df05      	svc	5
		break;
 80004d6:	e006      	b.n	80004e6 <OS_SVC_Set+0x5a>
	case Svc_disable_north_south_interrupt :
		__asm("SVC #0x6");
 80004d8:	df06      	svc	6
		break;
 80004da:	e004      	b.n	80004e6 <OS_SVC_Set+0x5a>
	case Svc_Enable_east_west_interrupt :
		__asm("SVC #0x7");
 80004dc:	df07      	svc	7
		break;
 80004de:	e002      	b.n	80004e6 <OS_SVC_Set+0x5a>
	case Svc_disable_east_west_interrupt :
		__asm("SVC #0x8");
 80004e0:	df08      	svc	8
		break;
 80004e2:	e000      	b.n	80004e6 <OS_SVC_Set+0x5a>
	default :
		break;
 80004e4:	bf00      	nop

	}


}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <Nabil_RTOS_update_Sch_table>:

//----------------------------------------------------------------------------------------------------------------------------------------------

void Nabil_RTOS_update_Sch_table()
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
	task_ref* temp;
	i = 0;
 80004f6:	4b4f      	ldr	r3, [pc, #316]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
	while(i<= created_tasks_number)
 80004fc:	e015      	b.n	800052a <Nabil_RTOS_update_Sch_table+0x3a>
	{
		if(OS_control.OS_tasks[i]->task_state != suspended)
 80004fe:	4b4d      	ldr	r3, [pc, #308]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a4d      	ldr	r2, [pc, #308]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 8000504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800050c:	2b00      	cmp	r3, #0
 800050e:	d007      	beq.n	8000520 <Nabil_RTOS_update_Sch_table+0x30>
		{
			OS_control.OS_tasks[i]->task_state = waiting;
 8000510:	4b48      	ldr	r3, [pc, #288]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a48      	ldr	r2, [pc, #288]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 8000516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051a:	2201      	movs	r2, #1
 800051c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		}
		i++;
 8000520:	4b44      	ldr	r3, [pc, #272]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	4a43      	ldr	r2, [pc, #268]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 8000528:	6013      	str	r3, [r2, #0]
	while(i<= created_tasks_number)
 800052a:	4b42      	ldr	r3, [pc, #264]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b43      	ldr	r3, [pc, #268]	; (800063c <Nabil_RTOS_update_Sch_table+0x14c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	429a      	cmp	r2, r3
 8000534:	dde3      	ble.n	80004fe <Nabil_RTOS_update_Sch_table+0xe>

	}
	for(i=0; i < created_tasks_number ; i++)
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	e06f      	b.n	800061e <Nabil_RTOS_update_Sch_table+0x12e>
	{
		for(j = i+1 ; j <= created_tasks_number ; j++)
 800053e:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a3e      	ldr	r2, [pc, #248]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	e05e      	b.n	8000608 <Nabil_RTOS_update_Sch_table+0x118>
		{
			if(  OS_control.OS_tasks[j]->task_state  > OS_control.OS_tasks[i]->task_state  )
 800054a:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a3a      	ldr	r2, [pc, #232]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 8000550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000554:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000558:	4b36      	ldr	r3, [pc, #216]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4936      	ldr	r1, [pc, #216]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 800055e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000566:	429a      	cmp	r2, r3
 8000568:	d915      	bls.n	8000596 <Nabil_RTOS_update_Sch_table+0xa6>
			{
				temp = OS_control.OS_tasks[i];
 800056a:	4b32      	ldr	r3, [pc, #200]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a32      	ldr	r2, [pc, #200]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 8000570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000574:	607b      	str	r3, [r7, #4]
				OS_control.OS_tasks[i] = OS_control.OS_tasks[j];
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	492e      	ldr	r1, [pc, #184]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 8000580:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000584:	492c      	ldr	r1, [pc, #176]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_control.OS_tasks[j] = temp;
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	492a      	ldr	r1, [pc, #168]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
			if( OS_control.OS_tasks[j]->task_state  == OS_control.OS_tasks[i]->task_state)
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a27      	ldr	r2, [pc, #156]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 800059c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4923      	ldr	r1, [pc, #140]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 80005aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d123      	bne.n	80005fe <Nabil_RTOS_update_Sch_table+0x10e>
			{

				if( OS_control.OS_tasks[j]->piriority < OS_control.OS_tasks[i]->piriority )
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	791a      	ldrb	r2, [r3, #4]
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	491c      	ldr	r1, [pc, #112]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 80005c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d215      	bcs.n	80005fe <Nabil_RTOS_update_Sch_table+0x10e>
				{
					temp = OS_control.OS_tasks[i];
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 80005d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005dc:	607b      	str	r3, [r7, #4]
					OS_control.OS_tasks[i] = OS_control.OS_tasks[j];
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4914      	ldr	r1, [pc, #80]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 80005e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005ec:	4912      	ldr	r1, [pc, #72]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					OS_control.OS_tasks[j] = temp;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4910      	ldr	r1, [pc, #64]	; (8000638 <Nabil_RTOS_update_Sch_table+0x148>)
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j = i+1 ; j <= created_tasks_number ; j++)
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <Nabil_RTOS_update_Sch_table+0x150>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <Nabil_RTOS_update_Sch_table+0x14c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	dd9a      	ble.n	800054a <Nabil_RTOS_update_Sch_table+0x5a>
	for(i=0; i < created_tasks_number ; i++)
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a06      	ldr	r2, [pc, #24]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <Nabil_RTOS_update_Sch_table+0x144>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <Nabil_RTOS_update_Sch_table+0x14c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	db89      	blt.n	800053e <Nabil_RTOS_update_Sch_table+0x4e>
				}
			}

		}
	}
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	200000b8 	.word	0x200000b8
 8000638:	200000dc 	.word	0x200000dc
 800063c:	20000000 	.word	0x20000000
 8000640:	200000d8 	.word	0x200000d8

08000644 <Nabil_Rtos_Lock_Semaphore>:

//----------------------------------------------------------------------------------------------------------------------------------------------

enum RTOS_ERROR Nabil_Rtos_Lock_Semaphore(Semaphore_ref*x)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	x->semaphore_flag = 0;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <Nabil_Rtos_unLock_Semaphore>:
//----------------------------------------------------------------------------------------------------------------------------------------------

enum RTOS_ERROR Nabil_Rtos_unLock_Semaphore(Semaphore_ref*x)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
	x->semaphore_flag = 1;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]

}
 800066c:	bf00      	nop
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <check_Semaphore>:
//----------------------------------------------------------------------------------------------------------------------------------------------

unsigned char check_Semaphore(Semaphore_ref*x)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	return x->semaphore_flag;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <empty_ready_queue>:
//----------------------------------------------------------------------------------------------------------------------------------------------



void empty_ready_queue()
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
	int i = 0 ;
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
	while(ready_queue[i] && i < 100)
 800069a:	e007      	b.n	80006ac <empty_ready_queue+0x1c>
	{
		ready_queue[i] = NULL;
 800069c:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <empty_ready_queue+0x50>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2100      	movs	r1, #0
 80006a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i++;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3301      	adds	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
	while(ready_queue[i] && i < 100)
 80006ac:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <empty_ready_queue+0x50>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <empty_ready_queue+0x2e>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b63      	cmp	r3, #99	; 0x63
 80006bc:	ddee      	ble.n	800069c <empty_ready_queue+0xc>
	}
	Nabil_Rtos_Ready_queue.count = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <empty_ready_queue+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
	Nabil_Rtos_Ready_queue.head = Nabil_Rtos_Ready_queue.base;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <empty_ready_queue+0x54>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <empty_ready_queue+0x54>)
 80006ca:	6053      	str	r3, [r2, #4]
	Nabil_Rtos_Ready_queue.tail = Nabil_Rtos_Ready_queue.base;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <empty_ready_queue+0x54>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <empty_ready_queue+0x54>)
 80006d2:	6093      	str	r3, [r2, #8]

}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	200002d8 	.word	0x200002d8
 80006e4:	2000046c 	.word	0x2000046c

080006e8 <fill_ready_queue>:

//----------------------------------------------------------------------------------------------------------------------------------------------

void fill_ready_queue()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	if(OS_control.OS_tasks[0]->task_state)
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <fill_ready_queue+0x88>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d036      	beq.n	8000768 <fill_ready_queue+0x80>
	{
		Fifo_add_item(&Nabil_Rtos_Ready_queue, OS_control.OS_tasks[0]);
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <fill_ready_queue+0x88>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4619      	mov	r1, r3
 8000700:	481c      	ldr	r0, [pc, #112]	; (8000774 <fill_ready_queue+0x8c>)
 8000702:	f7ff fdc8 	bl	8000296 <Fifo_add_item>
		OS_control.OS_tasks[0]->task_state = ready;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <fill_ready_queue+0x88>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2202      	movs	r2, #2
 800070c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		int i ;
		for(i = 1 ; i <= created_tasks_number ; i++)
 8000710:	2301      	movs	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	e023      	b.n	800075e <fill_ready_queue+0x76>
		{
			if(OS_control.OS_tasks[i]->piriority == OS_control.OS_tasks[0]->piriority  && OS_control.OS_tasks[i]->task_state)
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <fill_ready_queue+0x88>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	791a      	ldrb	r2, [r3, #4]
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <fill_ready_queue+0x88>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	d11e      	bne.n	8000768 <fill_ready_queue+0x80>
 800072a:	4a11      	ldr	r2, [pc, #68]	; (8000770 <fill_ready_queue+0x88>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000736:	2b00      	cmp	r3, #0
 8000738:	d016      	beq.n	8000768 <fill_ready_queue+0x80>
			{
				Fifo_add_item(&Nabil_Rtos_Ready_queue, OS_control.OS_tasks[i]);
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <fill_ready_queue+0x88>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000742:	4619      	mov	r1, r3
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <fill_ready_queue+0x8c>)
 8000746:	f7ff fda6 	bl	8000296 <Fifo_add_item>
				OS_control.OS_tasks[i]->task_state = ready;
 800074a:	4a09      	ldr	r2, [pc, #36]	; (8000770 <fill_ready_queue+0x88>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000752:	2202      	movs	r2, #2
 8000754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		for(i = 1 ; i <= created_tasks_number ; i++)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3301      	adds	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <fill_ready_queue+0x90>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	429a      	cmp	r2, r3
 8000766:	ddd6      	ble.n	8000716 <fill_ready_queue+0x2e>
			}
			else
				break;
		}
	}
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000dc 	.word	0x200000dc
 8000774:	2000046c 	.word	0x2000046c
 8000778:	20000000 	.word	0x20000000

0800077c <OS_decide_what_next>:

//----------------------------------------------------------------------------------------------------------------------------------------------

void OS_decide_what_next()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

	//case 1- ready queue is empty & there's only one running task
	if(Nabil_Rtos_Ready_queue.count == 0 && OS_control.current_task->task_state != suspended)
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <OS_decide_what_next+0xa4>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d11a      	bne.n	80007be <OS_decide_what_next+0x42>
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <OS_decide_what_next+0xa8>)
 800078a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800078e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000792:	2b00      	cmp	r3, #0
 8000794:	d013      	beq.n	80007be <OS_decide_what_next+0x42>
	{
		OS_control.current_task->task_state = running;
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <OS_decide_what_next+0xa8>)
 8000798:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800079c:	2203      	movs	r2, #3
 800079e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		Fifo_add_item(&Nabil_Rtos_Ready_queue, OS_control.current_task);
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <OS_decide_what_next+0xa8>)
 80007a4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007a8:	4619      	mov	r1, r3
 80007aa:	481d      	ldr	r0, [pc, #116]	; (8000820 <OS_decide_what_next+0xa4>)
 80007ac:	f7ff fd73 	bl	8000296 <Fifo_add_item>
		OS_control.next_task = OS_control.current_task;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <OS_decide_what_next+0xa8>)
 80007b2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007b6:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <OS_decide_what_next+0xa8>)
 80007b8:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
			Fifo_add_item(&Nabil_Rtos_Ready_queue, OS_control.current_task);
			OS_control.current_task->task_state  = ready;
		}

	}
}
 80007bc:	e02e      	b.n	800081c <OS_decide_what_next+0xa0>
	else if(Nabil_Rtos_Ready_queue.count)
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <OS_decide_what_next+0xa4>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d02a      	beq.n	800081c <OS_decide_what_next+0xa0>
		OS_control.next_task = Fifo_get_item(&Nabil_Rtos_Ready_queue);
 80007c6:	4816      	ldr	r0, [pc, #88]	; (8000820 <OS_decide_what_next+0xa4>)
 80007c8:	f7ff fd9c 	bl	8000304 <Fifo_get_item>
 80007cc:	4602      	mov	r2, r0
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <OS_decide_what_next+0xa8>)
 80007d0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		OS_control.next_task->task_state = running;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <OS_decide_what_next+0xa8>)
 80007d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007da:	2203      	movs	r2, #3
 80007dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		if(OS_control.current_task ->piriority == OS_control.next_task->piriority && OS_control.current_task->task_state != suspended)
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <OS_decide_what_next+0xa8>)
 80007e2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007e6:	791a      	ldrb	r2, [r3, #4]
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <OS_decide_what_next+0xa8>)
 80007ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d113      	bne.n	800081c <OS_decide_what_next+0xa0>
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <OS_decide_what_next+0xa8>)
 80007f6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00c      	beq.n	800081c <OS_decide_what_next+0xa0>
			Fifo_add_item(&Nabil_Rtos_Ready_queue, OS_control.current_task);
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <OS_decide_what_next+0xa8>)
 8000804:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000808:	4619      	mov	r1, r3
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <OS_decide_what_next+0xa4>)
 800080c:	f7ff fd43 	bl	8000296 <Fifo_add_item>
			OS_control.current_task->task_state  = ready;
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <OS_decide_what_next+0xa8>)
 8000812:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000816:	2202      	movs	r2, #2
 8000818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000046c 	.word	0x2000046c
 8000824:	200000dc 	.word	0x200000dc

08000828 <trigger_pendsv>:

//----------------------------------------------------------------------------------------------------------------------------------------------


void trigger_pendsv()
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk  ;
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <trigger_pendsv+0x18>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a03      	ldr	r2, [pc, #12]	; (8000840 <trigger_pendsv+0x18>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6053      	str	r3, [r2, #4]

}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <service_handler>:
void service_handler(int*ptr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

	// PTR = R0 which carry value of either MSP or PSP
	// from memory  layer adding 6 to  PTR let PTR points to PC which carry the next instruction after SVC call.
	ptr+=6;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3318      	adds	r3, #24
 8000850:	607b      	str	r3, [r7, #4]
	unsigned char* pc_val =  ( (unsigned char *) (*ptr));                                 //memory layer :-    													2.
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	60fb      	str	r3, [r7, #12]
	pc_val -= 2 ;            						                    //1. XPSR
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3b02      	subs	r3, #2
 800085c:	60fb      	str	r3, [r7, #12]
	unsigned char index =  * (unsigned short*)pc_val;                   //2. PC
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	72fb      	strb	r3, [r7, #11]
	switch(index)                                                       //3. LR
 8000864:	7afb      	ldrb	r3, [r7, #11]
 8000866:	3b01      	subs	r3, #1
 8000868:	2b07      	cmp	r3, #7
 800086a:	d850      	bhi.n	800090e <service_handler+0xca>
 800086c:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <service_handler+0x30>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	08000895 	.word	0x08000895
 8000878:	08000895 	.word	0x08000895
 800087c:	08000895 	.word	0x08000895
 8000880:	08000895 	.word	0x08000895
 8000884:	080008c1 	.word	0x080008c1
 8000888:	080008db 	.word	0x080008db
 800088c:	080008e9 	.word	0x080008e9
 8000890:	08000903 	.word	0x08000903
	case Svc_activate_task:
	case Svc_terminate_task :
	case Svc_Task_waiting_time :
	case Svc_piriority_inheritance :
		//update SCh. table , ready queue
		Nabil_RTOS_update_Sch_table();
 8000894:	f7ff fe2c 	bl	80004f0 <Nabil_RTOS_update_Sch_table>
		empty_ready_queue();
 8000898:	f7ff fefa 	bl	8000690 <empty_ready_queue>
		fill_ready_queue();
 800089c:	f7ff ff24 	bl	80006e8 <fill_ready_queue>
		//OS running
		if(OS_control.os_state == OS_running)
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <service_handler+0xd8>)
 80008a2:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d133      	bne.n	8000912 <service_handler+0xce>
		{
			if(OS_control.current_task != & system_idle_task)
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <service_handler+0xd8>)
 80008ac:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <service_handler+0xdc>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d02d      	beq.n	8000912 <service_handler+0xce>
			{
				OS_decide_what_next();
 80008b6:	f7ff ff61 	bl	800077c <OS_decide_what_next>
				//trigger PendSv ( switch context & restore)
				trigger_pendsv();
 80008ba:	f7ff ffb5 	bl	8000828 <trigger_pendsv>
			}
		}

		break ;
 80008be:	e028      	b.n	8000912 <service_handler+0xce>
	case Svc_Enable_north_south_interrupt :
		// clear pending req.
		EXTI->PR |= 0b11<<6;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <service_handler+0xe0>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	4a17      	ldr	r2, [pc, #92]	; (8000924 <service_handler+0xe0>)
 80008c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008ca:	6153      	str	r3, [r2, #20]
		MCAL_EXTI_Enable(6);
 80008cc:	2006      	movs	r0, #6
 80008ce:	f000 fbb1 	bl	8001034 <MCAL_EXTI_Enable>
		MCAL_EXTI_Enable(7);
 80008d2:	2007      	movs	r0, #7
 80008d4:	f000 fbae 	bl	8001034 <MCAL_EXTI_Enable>
		break ;
 80008d8:	e01c      	b.n	8000914 <service_handler+0xd0>
	case Svc_disable_north_south_interrupt :
		MCAL_EXTI_Disable(6);
 80008da:	2006      	movs	r0, #6
 80008dc:	f000 fc58 	bl	8001190 <MCAL_EXTI_Disable>
		MCAL_EXTI_Disable(7);
 80008e0:	2007      	movs	r0, #7
 80008e2:	f000 fc55 	bl	8001190 <MCAL_EXTI_Disable>
		break;
 80008e6:	e015      	b.n	8000914 <service_handler+0xd0>
	case Svc_Enable_east_west_interrupt :
		// clear pending req.
		EXTI->PR |= 0b11<<14;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <service_handler+0xe0>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <service_handler+0xe0>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f2:	6153      	str	r3, [r2, #20]
		MCAL_EXTI_Enable(14);
 80008f4:	200e      	movs	r0, #14
 80008f6:	f000 fb9d 	bl	8001034 <MCAL_EXTI_Enable>
		MCAL_EXTI_Enable(15);
 80008fa:	200f      	movs	r0, #15
 80008fc:	f000 fb9a 	bl	8001034 <MCAL_EXTI_Enable>
		break ;
 8000900:	e008      	b.n	8000914 <service_handler+0xd0>
	case Svc_disable_east_west_interrupt :
		MCAL_EXTI_Disable(14);
 8000902:	200e      	movs	r0, #14
 8000904:	f000 fc44 	bl	8001190 <MCAL_EXTI_Disable>
		MCAL_EXTI_Disable(15);
 8000908:	200f      	movs	r0, #15
 800090a:	f000 fc41 	bl	8001190 <MCAL_EXTI_Disable>
	default :
		break;
 800090e:	bf00      	nop
 8000910:	e000      	b.n	8000914 <service_handler+0xd0>
		break ;
 8000912:	bf00      	nop
	}
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000dc 	.word	0x200000dc
 8000920:	20000288 	.word	0x20000288
 8000924:	40010400 	.word	0x40010400

08000928 <update_tasks_time_waiting>:


void update_tasks_time_waiting()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	for(v=0 ; v <= created_tasks_number ; v++ )
 800092c:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e058      	b.n	80009e6 <update_tasks_time_waiting+0xbe>
	{
		if(OS_control.OS_tasks[v]->time_waiting.blocking == enable)
 8000934:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a30      	ldr	r2, [pc, #192]	; (80009fc <update_tasks_time_waiting+0xd4>)
 800093a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000942:	2b00      	cmp	r3, #0
 8000944:	d126      	bne.n	8000994 <update_tasks_time_waiting+0x6c>
		{
			OS_control.OS_tasks[v]->time_waiting.no_of_ticks --;
 8000946:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a2c      	ldr	r2, [pc, #176]	; (80009fc <update_tasks_time_waiting+0xd4>)
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000952:	3a01      	subs	r2, #1
 8000954:	649a      	str	r2, [r3, #72]	; 0x48
			if( (!( t1.time_waiting.no_of_ticks % 1000 ))   &&  t1.time_waiting.no_of_ticks && OS_control.OS_tasks[v] == &t1)
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <update_tasks_time_waiting+0xd8>)
 8000958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <update_tasks_time_waiting+0xdc>)
 800095c:	fba3 1302 	umull	r1, r3, r3, r2
 8000960:	099b      	lsrs	r3, r3, #6
 8000962:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000966:	fb01 f303 	mul.w	r3, r1, r3
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d111      	bne.n	8000994 <update_tasks_time_waiting+0x6c>
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <update_tasks_time_waiting+0xd8>)
 8000972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00d      	beq.n	8000994 <update_tasks_time_waiting+0x6c>
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <update_tasks_time_waiting+0xd4>)
 800097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000982:	4a1f      	ldr	r2, [pc, #124]	; (8000a00 <update_tasks_time_waiting+0xd8>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d105      	bne.n	8000994 <update_tasks_time_waiting+0x6c>
			{
				current_status.remaining_time --;
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <update_tasks_time_waiting+0xe0>)
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	3b01      	subs	r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <update_tasks_time_waiting+0xe0>)
 8000992:	705a      	strb	r2, [r3, #1]
			}

		}
		if(! (OS_control.OS_tasks[v]->time_waiting.no_of_ticks) && OS_control.OS_tasks[v]->time_waiting.blocking ==enable)
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a18      	ldr	r2, [pc, #96]	; (80009fc <update_tasks_time_waiting+0xd4>)
 800099a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d11b      	bne.n	80009dc <update_tasks_time_waiting+0xb4>
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <update_tasks_time_waiting+0xd4>)
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d112      	bne.n	80009dc <update_tasks_time_waiting+0xb4>
		{
			OS_control.OS_tasks[v]->time_waiting.blocking = disable;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <update_tasks_time_waiting+0xd4>)
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	2201      	movs	r2, #1
 80009c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			OS_control.OS_tasks[v]->task_state = waiting;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <update_tasks_time_waiting+0xd4>)
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	2201      	movs	r2, #1
 80009d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			OS_SVC_Set(Svc_Task_waiting_time);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f7ff fd58 	bl	800048c <OS_SVC_Set>
	for(v=0 ; v <= created_tasks_number ; v++ )
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <update_tasks_time_waiting+0xd0>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <update_tasks_time_waiting+0xe4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dda0      	ble.n	8000934 <update_tasks_time_waiting+0xc>

		}
	}
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000468 	.word	0x20000468
 80009fc:	200000dc 	.word	0x200000dc
 8000a00:	200005b4 	.word	0x200005b4
 8000a04:	10624dd3 	.word	0x10624dd3
 8000a08:	2000063c 	.word	0x2000063c
 8000a0c:	20000000 	.word	0x20000000

08000a10 <My_RTOS_Init>:



enum RTOS_ERROR My_RTOS_Init()

{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	enum RTOS_ERROR error_status = NO_ERROR;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71fb      	strb	r3, [r7, #7]

	//update OS mode

	OS_control.os_state = OS_suspended;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <My_RTOS_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//specify main stack & main task
	My_RTOS_Create_MainStack();
 8000a22:	f7ff fcd3 	bl	80003cc <My_RTOS_Create_MainStack>



	//create OS ready queue

	if( Fifo_init(&Nabil_Rtos_Ready_queue, ready_queue, 100) != Fifo_no_error )
 8000a26:	2264      	movs	r2, #100	; 0x64
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <My_RTOS_Init+0x5c>)
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <My_RTOS_Init+0x60>)
 8000a2c:	f7ff fc13 	bl	8000256 <Fifo_init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <My_RTOS_Init+0x2a>
	{
		return Fifo_error ;
 8000a36:	2304      	movs	r3, #4
 8000a38:	e012      	b.n	8000a60 <My_RTOS_Init+0x50>
	}


	// Initialize idle task
	strcpy(system_idle_task.task_name,"idle task");
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <My_RTOS_Init+0x64>)
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <My_RTOS_Init+0x68>)
 8000a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a40:	c303      	stmia	r3!, {r0, r1}
 8000a42:	801a      	strh	r2, [r3, #0]
	system_idle_task.piriority = 255;                  //lowest priority
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <My_RTOS_Init+0x6c>)
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	711a      	strb	r2, [r3, #4]
	system_idle_task.ptr_to_task = idle_task_funtion ;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <My_RTOS_Init+0x6c>)
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <My_RTOS_Init+0x70>)
 8000a4e:	609a      	str	r2, [r3, #8]
	system_idle_task.stack_size = 1000;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <My_RTOS_Init+0x6c>)
 8000a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a56:	601a      	str	r2, [r3, #0]
	Nabil_Rtos_Create_Task(&system_idle_task);
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <My_RTOS_Init+0x6c>)
 8000a5a:	f000 f827 	bl	8000aac <Nabil_Rtos_Create_Task>
	return error_status;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000dc 	.word	0x200000dc
 8000a6c:	200002d8 	.word	0x200002d8
 8000a70:	2000046c 	.word	0x2000046c
 8000a74:	200002a0 	.word	0x200002a0
 8000a78:	08002678 	.word	0x08002678
 8000a7c:	20000288 	.word	0x20000288
 8000a80:	08000385 	.word	0x08000385

08000a84 <Nabil_RTOS_Task_wait>:

//---------------------------------------------------------------------------------------------------------------------------------------------

void Nabil_RTOS_Task_wait(unsigned int no_of_mSecs , task_ref*p)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	p->time_waiting.blocking = enable;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	p->time_waiting.no_of_ticks = no_of_mSecs ;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	649a      	str	r2, [r3, #72]	; 0x48
	Nabil_Terminate_task(p);
 8000a9c:	6838      	ldr	r0, [r7, #0]
 8000a9e:	f000 f859 	bl	8000b54 <Nabil_Terminate_task>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <Nabil_Rtos_Create_Task>:

//---------------------------------------------------------------------------------------------------------------------------------------------


enum RTOS_ERROR Nabil_Rtos_Create_Task(task_ref*p)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	created_tasks_number ++;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <Nabil_Rtos_Create_Task+0x78>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <Nabil_Rtos_Create_Task+0x78>)
 8000abc:	6013      	str	r3, [r2, #0]
	enum RTOS_ERROR error_state = NO_ERROR;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73fb      	strb	r3, [r7, #15]
	//check if task size exceeds stack size or no
	if( ( OS_control.sp_locater - p->stack_size ) < ( (unsigned int)&_estack - (unsigned int)&_e_heap )  )
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <Nabil_Rtos_Create_Task+0x7c>)
 8000ac4:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	1ad2      	subs	r2, r2, r3
 8000ace:	4917      	ldr	r1, [pc, #92]	; (8000b2c <Nabil_Rtos_Create_Task+0x80>)
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <Nabil_Rtos_Create_Task+0x84>)
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d201      	bcs.n	8000adc <Nabil_Rtos_Create_Task+0x30>
		return OS_exceed_stack_size_error;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e01f      	b.n	8000b1c <Nabil_Rtos_Create_Task+0x70>
	p->_S_PSP_task = OS_control.sp_locater;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <Nabil_Rtos_Create_Task+0x7c>)
 8000ade:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60da      	str	r2, [r3, #12]
	p->_E_PSP_task = p->_S_PSP_task - p->stack_size;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1ad2      	subs	r2, r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	611a      	str	r2, [r3, #16]
	//Align 8 bytes for next task
	OS_control.sp_locater = p->_E_PSP_task - 8;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	3b08      	subs	r3, #8
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <Nabil_Rtos_Create_Task+0x7c>)
 8000afc:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	//Initialize PSP task stack
	Nabil_Rtos_create_task_stack(p);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fc81 	bl	8000408 <Nabil_Rtos_create_task_stack>
	//update task state
	p->task_state = suspended ;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	OS_control.OS_tasks[created_tasks_number] = p;
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <Nabil_Rtos_Create_Task+0x78>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4905      	ldr	r1, [pc, #20]	; (8000b28 <Nabil_Rtos_Create_Task+0x7c>)
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return error_state;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	200000dc 	.word	0x200000dc
 8000b2c:	20002800 	.word	0x20002800
 8000b30:	20000840 	.word	0x20000840

08000b34 <Nabil_Activate_task>:

//---------------------------------------------------------------------------------------------------------------------------------------------


enum RTOS_ERROR Nabil_Activate_task(task_ref*p)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	p->task_state = waiting;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	OS_SVC_Set(Svc_activate_task);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fca1 	bl	800048c <OS_SVC_Set>
	return NO_ERROR;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <Nabil_Terminate_task>:


//---------------------------------------------------------------------------------------------------------------------------------------------

enum RTOS_ERROR Nabil_Terminate_task(task_ref*p)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	p->task_state = suspended;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	OS_SVC_Set(Svc_terminate_task);
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff fc91 	bl	800048c <OS_SVC_Set>
	return NO_ERROR;
 8000b6a:	2300      	movs	r3, #0


}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <OS_Start>:
void OS_Start()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	//update OS state
	OS_control.os_state = OS_running;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <OS_Start+0x5c>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//activate idle task
	OS_control.current_task = & system_idle_task;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <OS_Start+0x5c>)
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <OS_Start+0x60>)
 8000b84:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	Nabil_Activate_task(&system_idle_task);
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <OS_Start+0x60>)
 8000b8a:	f7ff ffd3 	bl	8000b34 <Nabil_Activate_task>
	//start ticker
	OS_start_ticker();
 8000b8e:	f7ff fb5a 	bl	8000246 <OS_start_ticker>
	OS_SeT_PSP(OS_control.current_task->current_PSP);
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <OS_Start+0x5c>)
 8000b94:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f380 8809 	msr	PSP, r0
	//switch from MSPto PSP
	OS_SP_Shadow_PSP;
 8000ba0:	f3ef 8014 	mrs	r0, CONTROL
 8000ba4:	f040 0002 	orr.w	r0, r0, #2
 8000ba8:	f380 8814 	msr	CONTROL, r0
 8000bac:	f042 0201 	orr.w	r2, r2, #1
 8000bb0:	f382 8814 	msr	CONTROL, r2
	Switch_to_user_access;
 8000bb4:	f3ef 8214 	mrs	r2, CONTROL
 8000bb8:	f042 0201 	orr.w	r2, r2, #1
 8000bbc:	f382 8814 	msr	CONTROL, r2
	OS_control.current_task->ptr_to_task();
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <OS_Start+0x5c>)
 8000bc2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	4798      	blx	r3

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000dc 	.word	0x200000dc
 8000bd4:	20000288 	.word	0x20000288

08000bd8 <enhance_Piriority_inversion_latency>:


//========================================================================================================================================

void enhance_Piriority_inversion_latency(Mutex_ref*m)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if( m->next_handler->piriority <   m->current_handler->piriority)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	791a      	ldrb	r2, [r3, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d211      	bcs.n	8000c14 <enhance_Piriority_inversion_latency+0x3c>
	{
		m->current_handler->piriority_inheritance = true;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		m->current_handler->piriority_backup = m->current_handler->piriority ;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	7912      	ldrb	r2, [r2, #4]
 8000c04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		m->current_handler->piriority = m->next_handler->piriority ;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	7912      	ldrb	r2, [r2, #4]
 8000c12:	711a      	strb	r2, [r3, #4]
	}
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <Nabil_Rtos_Aquire_Mutex>:

//========================================================================================================================================

enum RTOS_ERROR Nabil_Rtos_Aquire_Mutex(Mutex_ref*m , task_ref*t)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
	if( ! m->current_handler)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <Nabil_Rtos_Aquire_Mutex+0x1a>
	{
		m->current_handler = t;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	e00f      	b.n	8000c58 <Nabil_Rtos_Aquire_Mutex+0x3a>
	}
	else
	{
		if(! m->next_handler )
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <Nabil_Rtos_Aquire_Mutex+0x36>
		{
			m->next_handler = t ;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	60da      	str	r2, [r3, #12]
			enhance_Piriority_inversion_latency(m);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffc6 	bl	8000bd8 <enhance_Piriority_inversion_latency>
			Nabil_Terminate_task(t);
 8000c4c:	6838      	ldr	r0, [r7, #0]
 8000c4e:	f7ff ff81 	bl	8000b54 <Nabil_Terminate_task>
 8000c52:	e001      	b.n	8000c58 <Nabil_Rtos_Aquire_Mutex+0x3a>

		}
		else
			return OS_mutex_busy;
 8000c54:	2303      	movs	r3, #3
 8000c56:	e000      	b.n	8000c5a <Nabil_Rtos_Aquire_Mutex+0x3c>

	}
	return NO_ERROR;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <Nabil_Rtos_Release_Mutex>:
//========================================================================================================================================

enum RTOS_ERROR Nabil_Rtos_Release_Mutex(Mutex_ref*m)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	if(m->current_handler->piriority_inheritance == true)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d10b      	bne.n	8000c8e <Nabil_Rtos_Release_Mutex+0x2c>
	{
		m->current_handler->piriority_inheritance = false;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		m->current_handler->piriority = m->current_handler->piriority_backup;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 8000c8c:	711a      	strb	r2, [r3, #4]

	}
	if(m->next_handler)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00c      	beq.n	8000cb0 <Nabil_Rtos_Release_Mutex+0x4e>
	{
		m->current_handler = m->next_handler ;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
		m->next_handler = Null ;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
		Nabil_Activate_task(m->current_handler);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff43 	bl	8000b34 <Nabil_Activate_task>
 8000cae:	e002      	b.n	8000cb6 <Nabil_Rtos_Release_Mutex+0x54>
	}
	else
	{
		m->current_handler = NULL ;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
	}

	return NO_ERROR;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <SysTick_Handler>:
//========================================================================================================================================

void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

	if(req1_delay)
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <SysTick_Handler+0x5c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d004      	beq.n	8000cd6 <SysTick_Handler+0x16>
	{
		req1_delay--;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <SysTick_Handler+0x5c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <SysTick_Handler+0x5c>)
 8000cd4:	6013      	str	r3, [r2, #0]
	}
	if(req2_delay)
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <SysTick_Handler+0x60>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d004      	beq.n	8000ce8 <SysTick_Handler+0x28>
	{
		req2_delay--;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <SysTick_Handler+0x60>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <SysTick_Handler+0x60>)
 8000ce6:	6013      	str	r3, [r2, #0]
	}
	if(north_south_IR_disable_time)
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <SysTick_Handler+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d004      	beq.n	8000cfa <SysTick_Handler+0x3a>
	{
		north_south_IR_disable_time --;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <SysTick_Handler+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <SysTick_Handler+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]
	}
	if(east_west_IR_disable_time)
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <SysTick_Handler+0x68>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d004      	beq.n	8000d0c <SysTick_Handler+0x4c>
	{
		east_west_IR_disable_time--;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <SysTick_Handler+0x68>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <SysTick_Handler+0x68>)
 8000d0a:	6013      	str	r3, [r2, #0]
	}
	update_tasks_time_waiting();
 8000d0c:	f7ff fe0c 	bl	8000928 <update_tasks_time_waiting>
	OS_decide_what_next();
 8000d10:	f7ff fd34 	bl	800077c <OS_decide_what_next>
	trigger_pendsv();
 8000d14:	f7ff fd88 	bl	8000828 <trigger_pendsv>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000bc 	.word	0x200000bc
 8000d20:	200000c0 	.word	0x200000c0
 8000d24:	200000c8 	.word	0x200000c8
 8000d28:	200000cc 	.word	0x200000cc

08000d2c <PendSV_Handler>:
//========================================================================================================================================
__attribute ((naked))void PendSV_Handler(void)
{
	//save context of current task

	OS_get_PSP(OS_control.current_task ->current_PSP);
 8000d2c:	4b6f      	ldr	r3, [pc, #444]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d2e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d32:	f3ef 8009 	mrs	r0, PSP
 8000d36:	4602      	mov	r2, r0
 8000d38:	615a      	str	r2, [r3, #20]
	OS_control.current_task->current_PSP--;
 8000d3a:	4b6c      	ldr	r3, [pc, #432]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d3c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d40:	695a      	ldr	r2, [r3, #20]
 8000d42:	3a04      	subs	r2, #4
 8000d44:	615a      	str	r2, [r3, #20]
	__asm("MOV %0, R4"
			:"=r" (*(  OS_control.current_task->current_PSP) ) );
 8000d46:	4b69      	ldr	r3, [pc, #420]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d48:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d4c:	695b      	ldr	r3, [r3, #20]
	__asm("MOV %0, R4"
 8000d4e:	4622      	mov	r2, r4
 8000d50:	601a      	str	r2, [r3, #0]
	OS_control.current_task->current_PSP--;
 8000d52:	4b66      	ldr	r3, [pc, #408]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d54:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d58:	695a      	ldr	r2, [r3, #20]
 8000d5a:	3a04      	subs	r2, #4
 8000d5c:	615a      	str	r2, [r3, #20]
	__asm("MOV %0, R5"
			:"=r" (*(  OS_control.current_task->current_PSP) ) );
 8000d5e:	4b63      	ldr	r3, [pc, #396]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d60:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d64:	695b      	ldr	r3, [r3, #20]
	__asm("MOV %0, R5"
 8000d66:	462a      	mov	r2, r5
 8000d68:	601a      	str	r2, [r3, #0]
	OS_control.current_task->current_PSP--;
 8000d6a:	4b60      	ldr	r3, [pc, #384]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d6c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	3a04      	subs	r2, #4
 8000d74:	615a      	str	r2, [r3, #20]
	__asm("MOV %0, R6"
			:"=r" (*(  OS_control.current_task->current_PSP) ) );
 8000d76:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d78:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d7c:	695b      	ldr	r3, [r3, #20]
	__asm("MOV %0, R6"
 8000d7e:	4632      	mov	r2, r6
 8000d80:	601a      	str	r2, [r3, #0]
	OS_control.current_task->current_PSP--;
 8000d82:	4b5a      	ldr	r3, [pc, #360]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d84:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	3a04      	subs	r2, #4
 8000d8c:	615a      	str	r2, [r3, #20]
	__asm("MOV %0, R7"
			:"=r" (*(  OS_control.current_task->current_PSP) ) );
 8000d8e:	4b57      	ldr	r3, [pc, #348]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d90:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d94:	695b      	ldr	r3, [r3, #20]
	__asm("MOV %0, R7"
 8000d96:	463a      	mov	r2, r7
 8000d98:	601a      	str	r2, [r3, #0]
	OS_control.current_task->current_PSP--;
 8000d9a:	4b54      	ldr	r3, [pc, #336]	; (8000eec <PendSV_Handler+0x1c0>)
 8000d9c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000da0:	695a      	ldr	r2, [r3, #20]
 8000da2:	3a04      	subs	r2, #4
 8000da4:	615a      	str	r2, [r3, #20]
	__asm("MOV %0, R8"
			:"=r" (*(  OS_control.current_task->current_PSP) ) );
 8000da6:	4b51      	ldr	r3, [pc, #324]	; (8000eec <PendSV_Handler+0x1c0>)
 8000da8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000dac:	695b      	ldr	r3, [r3, #20]
	__asm("MOV %0, R8"
 8000dae:	4642      	mov	r2, r8
 8000db0:	601a      	str	r2, [r3, #0]
	OS_control.current_task->current_PSP--;
 8000db2:	4b4e      	ldr	r3, [pc, #312]	; (8000eec <PendSV_Handler+0x1c0>)
 8000db4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000db8:	695a      	ldr	r2, [r3, #20]
 8000dba:	3a04      	subs	r2, #4
 8000dbc:	615a      	str	r2, [r3, #20]
	__asm("MOV %0, R9"
			:"=r" (*(  OS_control.current_task->current_PSP) ) );
 8000dbe:	4b4b      	ldr	r3, [pc, #300]	; (8000eec <PendSV_Handler+0x1c0>)
 8000dc0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000dc4:	695b      	ldr	r3, [r3, #20]
	__asm("MOV %0, R9"
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	601a      	str	r2, [r3, #0]
	OS_control.current_task->current_PSP--;
 8000dca:	4b48      	ldr	r3, [pc, #288]	; (8000eec <PendSV_Handler+0x1c0>)
 8000dcc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000dd0:	695a      	ldr	r2, [r3, #20]
 8000dd2:	3a04      	subs	r2, #4
 8000dd4:	615a      	str	r2, [r3, #20]
	__asm("MOV %0, R10"
			:"=r" (*(  OS_control.current_task->current_PSP) ) );
 8000dd6:	4b45      	ldr	r3, [pc, #276]	; (8000eec <PendSV_Handler+0x1c0>)
 8000dd8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000ddc:	695b      	ldr	r3, [r3, #20]
	__asm("MOV %0, R10"
 8000dde:	4652      	mov	r2, sl
 8000de0:	601a      	str	r2, [r3, #0]
	OS_control.current_task->current_PSP--;
 8000de2:	4b42      	ldr	r3, [pc, #264]	; (8000eec <PendSV_Handler+0x1c0>)
 8000de4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	3a04      	subs	r2, #4
 8000dec:	615a      	str	r2, [r3, #20]
	__asm("MOV %0, R11"
			:"=r" (*(  OS_control.current_task->current_PSP) ) );
 8000dee:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <PendSV_Handler+0x1c0>)
 8000df0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000df4:	695b      	ldr	r3, [r3, #20]
	__asm("MOV %0, R11"
 8000df6:	465a      	mov	r2, fp
 8000df8:	601a      	str	r2, [r3, #0]


	// restore context of next task
	if(OS_control.next_task)
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <PendSV_Handler+0x1c0>)
 8000dfc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d009      	beq.n	8000e18 <PendSV_Handler+0xec>
	{
		OS_control.current_task = OS_control.next_task;
 8000e04:	4b39      	ldr	r3, [pc, #228]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e06:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e0a:	4a38      	ldr	r2, [pc, #224]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e0c:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
		OS_control.next_task = NULL;
 8000e10:	4b36      	ldr	r3, [pc, #216]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	}
	__asm("MOV R11, %0"
			:
			:"r" (*(  OS_control.current_task->current_PSP) ) );
 8000e18:	4b34      	ldr	r3, [pc, #208]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e1a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	681b      	ldr	r3, [r3, #0]
	__asm("MOV R11, %0"
 8000e22:	469b      	mov	fp, r3
	OS_control.current_task->current_PSP++;
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e26:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	3204      	adds	r2, #4
 8000e2e:	615a      	str	r2, [r3, #20]
	__asm("MOV R10, %0"
			:
			:"r" (*(  OS_control.current_task->current_PSP) ) );
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e32:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	681b      	ldr	r3, [r3, #0]
	__asm("MOV R10, %0"
 8000e3a:	469a      	mov	sl, r3
	OS_control.current_task->current_PSP++;
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e3e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	3204      	adds	r2, #4
 8000e46:	615a      	str	r2, [r3, #20]
	__asm("MOV R9, %0"
			:
			:"r" (*(  OS_control.current_task->current_PSP) ) );
 8000e48:	4b28      	ldr	r3, [pc, #160]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e4a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	681b      	ldr	r3, [r3, #0]
	__asm("MOV R9, %0"
 8000e52:	4699      	mov	r9, r3
	OS_control.current_task->current_PSP++;
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e56:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e5a:	695a      	ldr	r2, [r3, #20]
 8000e5c:	3204      	adds	r2, #4
 8000e5e:	615a      	str	r2, [r3, #20]
	__asm("MOV R8, %0"
			:
			:"r" (*(  OS_control.current_task->current_PSP) ) );
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e62:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	681b      	ldr	r3, [r3, #0]
	__asm("MOV R8, %0"
 8000e6a:	4698      	mov	r8, r3
	OS_control.current_task->current_PSP++;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e6e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e72:	695a      	ldr	r2, [r3, #20]
 8000e74:	3204      	adds	r2, #4
 8000e76:	615a      	str	r2, [r3, #20]
	__asm("MOV R7, %0"
			:
			:"r" (*(  OS_control.current_task->current_PSP) ) );
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e7a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	681b      	ldr	r3, [r3, #0]
	__asm("MOV R7, %0"
 8000e82:	461f      	mov	r7, r3
	OS_control.current_task->current_PSP++;
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e86:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e8a:	695a      	ldr	r2, [r3, #20]
 8000e8c:	3204      	adds	r2, #4
 8000e8e:	615a      	str	r2, [r3, #20]
	__asm("MOV R6, %0"
			:
			:"r" (*(  OS_control.current_task->current_PSP) ) );
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e92:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	681b      	ldr	r3, [r3, #0]
	__asm("MOV R6, %0"
 8000e9a:	461e      	mov	r6, r3
	OS_control.current_task->current_PSP++;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <PendSV_Handler+0x1c0>)
 8000e9e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	3204      	adds	r2, #4
 8000ea6:	615a      	str	r2, [r3, #20]
	__asm("MOV R5, %0"
			:
			:"r" (*(  OS_control.current_task->current_PSP) ) );
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <PendSV_Handler+0x1c0>)
 8000eaa:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	681b      	ldr	r3, [r3, #0]
	__asm("MOV R5, %0"
 8000eb2:	461d      	mov	r5, r3
	OS_control.current_task->current_PSP++;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <PendSV_Handler+0x1c0>)
 8000eb6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	3204      	adds	r2, #4
 8000ebe:	615a      	str	r2, [r3, #20]
	__asm("MOV R4, %0"
			:
			:"r" (*(  OS_control.current_task->current_PSP) ) );
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <PendSV_Handler+0x1c0>)
 8000ec2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	681b      	ldr	r3, [r3, #0]
	__asm("MOV R4, %0"
 8000eca:	461c      	mov	r4, r3
	OS_control.current_task->current_PSP++;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <PendSV_Handler+0x1c0>)
 8000ece:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000ed2:	695a      	ldr	r2, [r3, #20]
 8000ed4:	3204      	adds	r2, #4
 8000ed6:	615a      	str	r2, [r3, #20]
	OS_SeT_PSP(OS_control.current_task->current_PSP);
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <PendSV_Handler+0x1c0>)
 8000eda:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f380 8809 	msr	PSP, r0
	__asm ("BX LR");
 8000ee6:	4770      	bx	lr
	//store context of the previous task
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	200000dc 	.word	0x200000dc

08000ef0 <MCAL_EXTI_Init>:
 * Note			-Each pin number will be the same number of interrupt line for which all configurations will be assigned
 */

void MCAL_EXTI_Init(EXTI_config_t*x)

{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	//modify the required pin on which interrupt will occur to be floating input

	GPIO_CONFIG_t ir_config;
	ir_config.Pin_Number = 1<<x->pin_and_line_number;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	889b      	ldrh	r3, [r3, #4]
 8000efc:	461a      	mov	r2, r3
 8000efe:	2301      	movs	r3, #1
 8000f00:	4093      	lsls	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	813b      	strh	r3, [r7, #8]
	ir_config.Pin_Mode = GPIO_MODE_Floating_input;
 8000f06:	2304      	movs	r3, #4
 8000f08:	72bb      	strb	r3, [r7, #10]
    MCAL_GPIO_Init(x->port,&ir_config);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fbdb 	bl	80016d0 <MCAL_GPIO_Init>

    //routing the required pin to the equivalent EXTI line by access AFIO registers

    uint8_t offset,shift_value;
    offset = x->pin_and_line_number / 4;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	889b      	ldrh	r3, [r3, #4]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	75fb      	strb	r3, [r7, #23]
    volatile uint32_t * Ir_routing_pt = &(AFIO->EXTICR1) + offset;                   //mapping pin to proper register according to interrupt line
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	009a      	lsls	r2, r3, #2
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <MCAL_EXTI_Init+0x138>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
    shift_value = ( x->pin_and_line_number % 4 ) * 4;   	                         //each line is configured by 4 pin to be routed to the proper port
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	889b      	ldrh	r3, [r3, #4]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	73fb      	strb	r3, [r7, #15]

note: each register from EXTICR(1:4) is responsible for routing 4 interrupt lines from EXTI0 : EXTI15

*/

    *Ir_routing_pt &= ~(0b1111<<shift_value);                                   //set configuration bits to 0000 before assign required value
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	210f      	movs	r1, #15
 8000f46:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4a:	43d2      	mvns	r2, r2
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	601a      	str	r2, [r3, #0]
	*Ir_routing_pt |= (routing_value(x->port)<<shift_value);                    //assign the proper value according to the required port
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f9d0 	bl	80012fc <routing_value>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	601a      	str	r2, [r3, #0]
	arr_of_ptF[x->pin_and_line_number] = x->isr_p;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	889b      	ldrh	r3, [r3, #4]
 8000f72:	4619      	mov	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4a2c      	ldr	r2, [pc, #176]	; (800102c <MCAL_EXTI_Init+0x13c>)
 8000f7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

//assign values of EXTI registers to achieve required mode

	switch (x->interrupt_mode)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	799b      	ldrb	r3, [r3, #6]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d004      	beq.n	8000f90 <MCAL_EXTI_Init+0xa0>
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d032      	beq.n	8000ff0 <MCAL_EXTI_Init+0x100>
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d018      	beq.n	8000fc0 <MCAL_EXTI_Init+0xd0>
	EXTI->FTSR 	|= 1<<(x->pin_and_line_number) ;
	break;
	}


}
 8000f8e:	e046      	b.n	800101e <MCAL_EXTI_Init+0x12e>
	EXTI->RTSR |= 1<<(x->pin_and_line_number) ;
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	8892      	ldrh	r2, [r2, #4]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	408a      	lsls	r2, r1
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4a23      	ldr	r2, [pc, #140]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8000fa2:	430b      	orrs	r3, r1
 8000fa4:	6093      	str	r3, [r2, #8]
	EXTI->FTSR 	&= ~1<<(x->pin_and_line_number) ;
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	8892      	ldrh	r2, [r2, #4]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	f06f 0201 	mvn.w	r2, #1
 8000fb4:	408a      	lsls	r2, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8000fba:	400b      	ands	r3, r1
 8000fbc:	60d3      	str	r3, [r2, #12]
	break;
 8000fbe:	e02e      	b.n	800101e <MCAL_EXTI_Init+0x12e>
	EXTI->FTSR 	|= 1<<(x->pin_and_line_number) ;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	8892      	ldrh	r2, [r2, #4]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	2201      	movs	r2, #1
 8000fcc:	408a      	lsls	r2, r1
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4a17      	ldr	r2, [pc, #92]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8000fd2:	430b      	orrs	r3, r1
 8000fd4:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~1<<(x->pin_and_line_number) ;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	8892      	ldrh	r2, [r2, #4]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	f06f 0201 	mvn.w	r2, #1
 8000fe4:	408a      	lsls	r2, r1
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4a11      	ldr	r2, [pc, #68]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8000fea:	400b      	ands	r3, r1
 8000fec:	6093      	str	r3, [r2, #8]
	break ;
 8000fee:	e016      	b.n	800101e <MCAL_EXTI_Init+0x12e>
	EXTI->RTSR |= 1<<(x->pin_and_line_number) ;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	8892      	ldrh	r2, [r2, #4]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	408a      	lsls	r2, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8001002:	430b      	orrs	r3, r1
 8001004:	6093      	str	r3, [r2, #8]
	EXTI->FTSR 	|= 1<<(x->pin_and_line_number) ;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	8892      	ldrh	r2, [r2, #4]
 800100e:	4611      	mov	r1, r2
 8001010:	2201      	movs	r2, #1
 8001012:	408a      	lsls	r2, r1
 8001014:	4611      	mov	r1, r2
 8001016:	4a06      	ldr	r2, [pc, #24]	; (8001030 <MCAL_EXTI_Init+0x140>)
 8001018:	430b      	orrs	r3, r1
 800101a:	60d3      	str	r3, [r2, #12]
	break;
 800101c:	bf00      	nop
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40010008 	.word	0x40010008
 800102c:	20000480 	.word	0x20000480
 8001030:	40010400 	.word	0x40010400

08001034 <MCAL_EXTI_Enable>:
 *
 *
 */

void MCAL_EXTI_Enable(uint8_t interrupt_number)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	switch(interrupt_number)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	f200 809a 	bhi.w	800117a <MCAL_EXTI_Enable+0x146>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <MCAL_EXTI_Enable+0x18>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	0800108d 	.word	0x0800108d
 8001050:	080010af 	.word	0x080010af
 8001054:	080010d1 	.word	0x080010d1
 8001058:	080010f3 	.word	0x080010f3
 800105c:	08001115 	.word	0x08001115
 8001060:	08001137 	.word	0x08001137
 8001064:	08001137 	.word	0x08001137
 8001068:	08001137 	.word	0x08001137
 800106c:	08001137 	.word	0x08001137
 8001070:	08001137 	.word	0x08001137
 8001074:	08001159 	.word	0x08001159
 8001078:	08001159 	.word	0x08001159
 800107c:	08001159 	.word	0x08001159
 8001080:	08001159 	.word	0x08001159
 8001084:	08001159 	.word	0x08001159
 8001088:	08001159 	.word	0x08001159
	{
	case 0 :
	EXTI->IMR |= (1<<interrupt_number) ;                         //Enable interrupt request line at EXTI peripheral
 800108c:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	79fa      	ldrb	r2, [r7, #7]
 8001092:	2101      	movs	r1, #1
 8001094:	fa01 f202 	lsl.w	r2, r1, r2
 8001098:	4611      	mov	r1, r2
 800109a:	4a3a      	ldr	r2, [pc, #232]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 800109c:	430b      	orrs	r3, r1
 800109e:	6013      	str	r3, [r2, #0]
    NVIC_EXTI0_ENABLE ;                                          //Enable interrupt request at NVIC
 80010a0:	4b39      	ldr	r3, [pc, #228]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a38      	ldr	r2, [pc, #224]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 80010a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010aa:	6013      	str	r3, [r2, #0]
    break;
 80010ac:	e065      	b.n	800117a <MCAL_EXTI_Enable+0x146>
	case 1 :
	EXTI->IMR |= (1<<interrupt_number) ;                         //Enable interrupt request line at EXTI peripheral
 80010ae:	4b35      	ldr	r3, [pc, #212]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	2101      	movs	r1, #1
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	4611      	mov	r1, r2
 80010bc:	4a31      	ldr	r2, [pc, #196]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 80010be:	430b      	orrs	r3, r1
 80010c0:	6013      	str	r3, [r2, #0]
    NVIC_EXTI1_ENABLE ;                                          //Enable interrupt request at NVIC
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a30      	ldr	r2, [pc, #192]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010cc:	6013      	str	r3, [r2, #0]
    break;
 80010ce:	e054      	b.n	800117a <MCAL_EXTI_Enable+0x146>
	case 2 :
	EXTI->IMR |= (1<<interrupt_number) ;                         //Enable interrupt request line at EXTI peripheral
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	4611      	mov	r1, r2
 80010de:	4a29      	ldr	r2, [pc, #164]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 80010e0:	430b      	orrs	r3, r1
 80010e2:	6013      	str	r3, [r2, #0]
    NVIC_EXTI2_ENABLE ;                                          //Enable interrupt request at NVIC
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a27      	ldr	r2, [pc, #156]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
    break;
 80010f0:	e043      	b.n	800117a <MCAL_EXTI_Enable+0x146>
	case 3 :
	EXTI->IMR |= (1<<interrupt_number) ;                         //Enable interrupt request line at EXTI peripheral
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	4611      	mov	r1, r2
 8001100:	4a20      	ldr	r2, [pc, #128]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 8001102:	430b      	orrs	r3, r1
 8001104:	6013      	str	r3, [r2, #0]
    NVIC_EXTI3_ENABLE ;                                          //Enable interrupt request at NVIC
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 800110c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001110:	6013      	str	r3, [r2, #0]
    break;
 8001112:	e032      	b.n	800117a <MCAL_EXTI_Enable+0x146>
	case 4 :
	EXTI->IMR |= (1<<interrupt_number) ;                         //Enable interrupt request line at EXTI peripheral
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	79fa      	ldrb	r2, [r7, #7]
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	4611      	mov	r1, r2
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 8001124:	430b      	orrs	r3, r1
 8001126:	6013      	str	r3, [r2, #0]
    NVIC_EXTI4_ENABLE ;                                          //Enable interrupt request at NVIC
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a16      	ldr	r2, [pc, #88]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
    break;
 8001134:	e021      	b.n	800117a <MCAL_EXTI_Enable+0x146>
	case 5 :
	case 6 :
	case 7 :
	case 8 :
	case 9 :
	EXTI->IMR |= (1<<interrupt_number) ;                          //Enable interrupt request line at EXTI peripheral
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	79fa      	ldrb	r2, [r7, #7]
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	4611      	mov	r1, r2
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 8001146:	430b      	orrs	r3, r1
 8001148:	6013      	str	r3, [r2, #0]
	NVIC_EXTI5_9_ENABLE ;                                         //Enable interrupt request at NVIC
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <MCAL_EXTI_Enable+0x154>)
 8001150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001154:	6013      	str	r3, [r2, #0]
	break;
 8001156:	e010      	b.n	800117a <MCAL_EXTI_Enable+0x146>
	case 11 :
	case 12 :
	case 13 :
	case 14 :
	case 15 :
	EXTI->IMR |= (1<<interrupt_number) ;                          //Enable interrupt request line at EXTI peripheral
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	4611      	mov	r1, r2
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <MCAL_EXTI_Enable+0x150>)
 8001168:	430b      	orrs	r3, r1
 800116a:	6013      	str	r3, [r2, #0]
	NVIC_EXTI10_15_ENABLE ;                                       //Enable interrupt request at NVIC
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MCAL_EXTI_Enable+0x158>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <MCAL_EXTI_Enable+0x158>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]
	break;
 8001178:	bf00      	nop
	}

	}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40010400 	.word	0x40010400
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000e104 	.word	0xe000e104

08001190 <MCAL_EXTI_Disable>:
 *
 */

void MCAL_EXTI_Disable(uint8_t interrupt_number)

{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	switch(interrupt_number)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	f200 80a1 	bhi.w	80012e4 <MCAL_EXTI_Disable+0x154>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <MCAL_EXTI_Disable+0x18>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080011e9 	.word	0x080011e9
 80011ac:	0800120d 	.word	0x0800120d
 80011b0:	08001231 	.word	0x08001231
 80011b4:	08001255 	.word	0x08001255
 80011b8:	08001279 	.word	0x08001279
 80011bc:	0800129d 	.word	0x0800129d
 80011c0:	0800129d 	.word	0x0800129d
 80011c4:	0800129d 	.word	0x0800129d
 80011c8:	0800129d 	.word	0x0800129d
 80011cc:	0800129d 	.word	0x0800129d
 80011d0:	080012c1 	.word	0x080012c1
 80011d4:	080012c1 	.word	0x080012c1
 80011d8:	080012c1 	.word	0x080012c1
 80011dc:	080012c1 	.word	0x080012c1
 80011e0:	080012c1 	.word	0x080012c1
 80011e4:	080012c1 	.word	0x080012c1
	{
	case 0 :
	EXTI->IMR &= ~(1<<interrupt_number) ;                         //DISABLE interrupt request line at EXTI peripheral
 80011e8:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	43d2      	mvns	r2, r2
 80011f6:	4611      	mov	r1, r2
 80011f8:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 80011fa:	400b      	ands	r3, r1
 80011fc:	6013      	str	r3, [r2, #0]
    NVIC_EXTI0_DISABLE ;                                          //DISABLE interrupt request at NVIC
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a3c      	ldr	r2, [pc, #240]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 8001204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001208:	6013      	str	r3, [r2, #0]
    break;
 800120a:	e06b      	b.n	80012e4 <MCAL_EXTI_Disable+0x154>
	case 1 :
	EXTI->IMR &= ~(1<<interrupt_number) ;                         //DISABLE interrupt request line at EXTI peripheral
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	2101      	movs	r1, #1
 8001214:	fa01 f202 	lsl.w	r2, r1, r2
 8001218:	43d2      	mvns	r2, r2
 800121a:	4611      	mov	r1, r2
 800121c:	4a34      	ldr	r2, [pc, #208]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 800121e:	400b      	ands	r3, r1
 8001220:	6013      	str	r3, [r2, #0]
    NVIC_EXTI1_DISABLE ;                                          //DISABLE interrupt request at NVIC
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122c:	6013      	str	r3, [r2, #0]
    break;
 800122e:	e059      	b.n	80012e4 <MCAL_EXTI_Disable+0x154>
	case 2 :
	EXTI->IMR &= ~(1<<interrupt_number) ;                         //DISABLE interrupt request line at EXTI peripheral
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	43d2      	mvns	r2, r2
 800123e:	4611      	mov	r1, r2
 8001240:	4a2b      	ldr	r2, [pc, #172]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 8001242:	400b      	ands	r3, r1
 8001244:	6013      	str	r3, [r2, #0]
    NVIC_EXTI2_DISABLE ;                                          //DISABLE interrupt request at NVIC
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a2a      	ldr	r2, [pc, #168]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001250:	6013      	str	r3, [r2, #0]
    break;
 8001252:	e047      	b.n	80012e4 <MCAL_EXTI_Disable+0x154>
	case 3 :
	EXTI->IMR &= ~(1<<interrupt_number) ;                         //DISABLE interrupt request line at EXTI peripheral
 8001254:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	43d2      	mvns	r2, r2
 8001262:	4611      	mov	r1, r2
 8001264:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 8001266:	400b      	ands	r3, r1
 8001268:	6013      	str	r3, [r2, #0]
    NVIC_EXTI3_DISABLE ;                                          //DISABLE interrupt request at NVIC
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 8001270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001274:	6013      	str	r3, [r2, #0]
    break;
 8001276:	e035      	b.n	80012e4 <MCAL_EXTI_Disable+0x154>
	case 4 :
	EXTI->IMR &= ~(1<<interrupt_number) ;                         //DISABLE interrupt request line at EXTI peripheral
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	43d2      	mvns	r2, r2
 8001286:	4611      	mov	r1, r2
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 800128a:	400b      	ands	r3, r1
 800128c:	6013      	str	r3, [r2, #0]
    NVIC_EXTI4_DISABLE ;                                          //DISABLE interrupt request at NVIC
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 8001294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001298:	6013      	str	r3, [r2, #0]
    break;
 800129a:	e023      	b.n	80012e4 <MCAL_EXTI_Disable+0x154>
	case 5 :
	case 6 :
	case 7 :
	case 8 :
	case 9 :
	EXTI->IMR &= ~(1<<interrupt_number) ;                          //DISABLE interrupt request line at EXTI peripheral
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	2101      	movs	r1, #1
 80012a4:	fa01 f202 	lsl.w	r2, r1, r2
 80012a8:	43d2      	mvns	r2, r2
 80012aa:	4611      	mov	r1, r2
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 80012ae:	400b      	ands	r3, r1
 80012b0:	6013      	str	r3, [r2, #0]
	NVIC_EXTI5_9_DISABLE ;                                         //DISABLE interrupt request at NVIC
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <MCAL_EXTI_Disable+0x164>)
 80012b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012bc:	6013      	str	r3, [r2, #0]
	break;
 80012be:	e011      	b.n	80012e4 <MCAL_EXTI_Disable+0x154>
	case 11 :
	case 12 :
	case 13 :
	case 14 :
	case 15 :
	EXTI->IMR &= ~(1<<interrupt_number) ;                          //DISABLE interrupt request line at EXTI peripheral
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	43d2      	mvns	r2, r2
 80012ce:	4611      	mov	r1, r2
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <MCAL_EXTI_Disable+0x160>)
 80012d2:	400b      	ands	r3, r1
 80012d4:	6013      	str	r3, [r2, #0]
	NVIC_EXTI10_15_DISABLE ;                                       //DISABLE interrupt request at NVIC
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MCAL_EXTI_Disable+0x168>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <MCAL_EXTI_Disable+0x168>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]
	break;
 80012e2:	bf00      	nop
	}

}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40010400 	.word	0x40010400
 80012f4:	e000e180 	.word	0xe000e180
 80012f8:	e000e184 	.word	0xe000e184

080012fc <routing_value>:



//function return the proper value of 4 bits configured by EXTIC registers of AFIO according to the required port
uint8_t routing_value(GPIO_t*x)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if( x==GPIOA )
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <routing_value+0x44>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d101      	bne.n	8001310 <routing_value+0x14>
		return 0b0000;
 800130c:	2300      	movs	r3, #0
 800130e:	e012      	b.n	8001336 <routing_value+0x3a>
	else if( x== GPIOB)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <routing_value+0x48>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d101      	bne.n	800131c <routing_value+0x20>
		return 0b0001;
 8001318:	2301      	movs	r3, #1
 800131a:	e00c      	b.n	8001336 <routing_value+0x3a>
	else if( x== GPIOC)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <routing_value+0x4c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <routing_value+0x2c>
		return 0b0010;
 8001324:	2302      	movs	r3, #2
 8001326:	e006      	b.n	8001336 <routing_value+0x3a>
	else if( x== GPIOD)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <routing_value+0x50>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <routing_value+0x38>
		return 0b0011;
 8001330:	2303      	movs	r3, #3
 8001332:	e000      	b.n	8001336 <routing_value+0x3a>
	else
		return 0b000;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40010800 	.word	0x40010800
 8001344:	40010c00 	.word	0x40010c00
 8001348:	40011000 	.word	0x40011000
 800134c:	40011400 	.word	0x40011400

08001350 <EXTI0_IRQHandler>:
/**=========================================================================================================================================================*/
                                                      //INTERRUPT SERVICE ROUTINE


void EXTI0_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	arr_of_ptF[0]();                                                           //call function
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <EXTI0_IRQHandler+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4798      	blx	r3
    EXTI->PR |= (1<<0);                                                        //clear pending status in EXTI
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <EXTI0_IRQHandler+0x2c>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a07      	ldr	r2, [pc, #28]	; (800137c <EXTI0_IRQHandler+0x2c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI0_IRQ);                                              //clear pending status in NVIC
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <EXTI0_IRQHandler+0x30>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <EXTI0_IRQHandler+0x30>)
 800136c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001370:	6013      	str	r3, [r2, #0]
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000480 	.word	0x20000480
 800137c:	40010400 	.word	0x40010400
 8001380:	e000e280 	.word	0xe000e280

08001384 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	arr_of_ptF[1]();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <EXTI1_IRQHandler+0x28>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4798      	blx	r3
    EXTI->PR |= (1<<1);
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <EXTI1_IRQHandler+0x2c>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <EXTI1_IRQHandler+0x2c>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI1_IRQ);
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <EXTI1_IRQHandler+0x30>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <EXTI1_IRQHandler+0x30>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6013      	str	r3, [r2, #0]
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000480 	.word	0x20000480
 80013b0:	40010400 	.word	0x40010400
 80013b4:	e000e280 	.word	0xe000e280

080013b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	arr_of_ptF[2]();
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <EXTI2_IRQHandler+0x28>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4798      	blx	r3
    EXTI->PR |= (1<<2);
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <EXTI2_IRQHandler+0x2c>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <EXTI2_IRQHandler+0x2c>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI2_IRQ);
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <EXTI2_IRQHandler+0x30>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <EXTI2_IRQHandler+0x30>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	6013      	str	r3, [r2, #0]

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000480 	.word	0x20000480
 80013e4:	40010400 	.word	0x40010400
 80013e8:	e000e280 	.word	0xe000e280

080013ec <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	arr_of_ptF[3]();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <EXTI3_IRQHandler+0x28>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4798      	blx	r3
    EXTI->PR |= (1<<3);
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <EXTI3_IRQHandler+0x2c>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <EXTI3_IRQHandler+0x2c>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI3_IRQ);
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <EXTI3_IRQHandler+0x30>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <EXTI3_IRQHandler+0x30>)
 8001408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140c:	6013      	str	r3, [r2, #0]

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000480 	.word	0x20000480
 8001418:	40010400 	.word	0x40010400
 800141c:	e000e280 	.word	0xe000e280

08001420 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	arr_of_ptF[4]();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <EXTI4_IRQHandler+0x28>)
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4798      	blx	r3
    EXTI->PR |= (1<<4);
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <EXTI4_IRQHandler+0x2c>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a07      	ldr	r2, [pc, #28]	; (800144c <EXTI4_IRQHandler+0x2c>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI1_IRQ);
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <EXTI4_IRQHandler+0x30>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <EXTI4_IRQHandler+0x30>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	6013      	str	r3, [r2, #0]

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000480 	.word	0x20000480
 800144c:	40010400 	.word	0x40010400
 8001450:	e000e280 	.word	0xe000e280

08001454 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
     if ( EXTI->PR & (1<<5) )    		 { EXTI->PR |= (1<<5);   	 arr_of_ptF[5](); }
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <EXTI9_5_IRQHandler+0x22>
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	4a25      	ldr	r2, [pc, #148]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 800146a:	f043 0320 	orr.w	r3, r3, #32
 800146e:	6153      	str	r3, [r2, #20]
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <EXTI9_5_IRQHandler+0xb0>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	4798      	blx	r3
     if ( EXTI->PR & (1<<6) ) 			 { EXTI->PR |= (1<<6);   	 arr_of_ptF[6](); }
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <EXTI9_5_IRQHandler+0x40>
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 8001488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800148c:	6153      	str	r3, [r2, #20]
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <EXTI9_5_IRQHandler+0xb0>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4798      	blx	r3
     if ( EXTI->PR & (1<<7) ) 			 { EXTI->PR |= (1<<7);   	 arr_of_ptF[7](); }
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <EXTI9_5_IRQHandler+0x5e>
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	4a16      	ldr	r2, [pc, #88]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 80014a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014aa:	6153      	str	r3, [r2, #20]
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <EXTI9_5_IRQHandler+0xb0>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	4798      	blx	r3
     if ( EXTI->PR & (1<<8) ) 			 { EXTI->PR |= (1<<8);   	 arr_of_ptF[8](); }
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <EXTI9_5_IRQHandler+0x7c>
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c8:	6153      	str	r3, [r2, #20]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <EXTI9_5_IRQHandler+0xb0>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4798      	blx	r3
     if ( EXTI->PR & (1<<9) ) 		   	 { EXTI->PR |= (1<<9);   	 arr_of_ptF[9](); }
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <EXTI9_5_IRQHandler+0x9a>
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <EXTI9_5_IRQHandler+0xac>)
 80014e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e6:	6153      	str	r3, [r2, #20]
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <EXTI9_5_IRQHandler+0xb0>)
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	4798      	blx	r3

    NVIC_ICPR0 |= (1<<EXTI5_9_IRQ);
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <EXTI9_5_IRQHandler+0xb4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <EXTI9_5_IRQHandler+0xb4>)
 80014f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014f8:	6013      	str	r3, [r2, #0]

	}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40010400 	.word	0x40010400
 8001504:	20000480 	.word	0x20000480
 8001508:	e000e280 	.word	0xe000e280

0800150c <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    if ( EXTI->PR & (1<<10) )    		 { EXTI->PR |= (1<<10);   	 arr_of_ptF[10](); }
 8001510:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <EXTI15_10_IRQHandler+0x22>
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	4a2c      	ldr	r2, [pc, #176]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 8001522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001526:	6153      	str	r3, [r2, #20]
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <EXTI15_10_IRQHandler+0xcc>)
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	4798      	blx	r3
    if ( EXTI->PR & (1<<11) ) 			 { EXTI->PR |= (1<<11);   	 arr_of_ptF[11](); }
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <EXTI15_10_IRQHandler+0x40>
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a25      	ldr	r2, [pc, #148]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 8001540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001544:	6153      	str	r3, [r2, #20]
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <EXTI15_10_IRQHandler+0xcc>)
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	4798      	blx	r3
    if ( EXTI->PR & (1<<12) ) 			 { EXTI->PR |= (1<<12);   	 arr_of_ptF[12](); }
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <EXTI15_10_IRQHandler+0x5e>
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 800155e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001562:	6153      	str	r3, [r2, #20]
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <EXTI15_10_IRQHandler+0xcc>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	4798      	blx	r3
    if ( EXTI->PR & (1<<13) ) 			 { EXTI->PR |= (1<<13);   	 arr_of_ptF[13](); }
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <EXTI15_10_IRQHandler+0x7c>
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 800157c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <EXTI15_10_IRQHandler+0xcc>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	4798      	blx	r3
    if ( EXTI->PR & (1<<14) ) 		   	 { EXTI->PR |= (1<<14);   	 arr_of_ptF[14](); }
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <EXTI15_10_IRQHandler+0x9a>
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 800159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159e:	6153      	str	r3, [r2, #20]
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <EXTI15_10_IRQHandler+0xcc>)
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	4798      	blx	r3
    if ( EXTI->PR & (1<<15) ) 		   	 { EXTI->PR |= (1<<15);   	 arr_of_ptF[15](); }
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d008      	beq.n	80015c4 <EXTI15_10_IRQHandler+0xb8>
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <EXTI15_10_IRQHandler+0xc8>)
 80015b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015bc:	6153      	str	r3, [r2, #20]
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <EXTI15_10_IRQHandler+0xcc>)
 80015c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c2:	4798      	blx	r3

   NVIC_ICPR1 |= (1<<(EXTI10_15_IRQ - 32));
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <EXTI15_10_IRQHandler+0xd0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <EXTI15_10_IRQHandler+0xd0>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]

	}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40010400 	.word	0x40010400
 80015d8:	20000480 	.word	0x20000480
 80015dc:	e000e284 	.word	0xe000e284

080015e0 <get_position>:
#include "GPIO.h"


//function to return the correct shift value for the equivalent pin needed to be configured
uint8_t get_position(uint16_t pin_number)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
	switch(pin_number)
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	2b80      	cmp	r3, #128	; 0x80
 80015ee:	d042      	beq.n	8001676 <get_position+0x96>
 80015f0:	2b80      	cmp	r3, #128	; 0x80
 80015f2:	dc11      	bgt.n	8001618 <get_position+0x38>
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d036      	beq.n	8001666 <get_position+0x86>
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	dc06      	bgt.n	800160a <get_position+0x2a>
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d02e      	beq.n	800165e <get_position+0x7e>
 8001600:	2b04      	cmp	r3, #4
 8001602:	d02e      	beq.n	8001662 <get_position+0x82>
 8001604:	2b01      	cmp	r3, #1
 8001606:	d028      	beq.n	800165a <get_position+0x7a>
 8001608:	e047      	b.n	800169a <get_position+0xba>
 800160a:	2b20      	cmp	r3, #32
 800160c:	d02f      	beq.n	800166e <get_position+0x8e>
 800160e:	2b40      	cmp	r3, #64	; 0x40
 8001610:	d02f      	beq.n	8001672 <get_position+0x92>
 8001612:	2b10      	cmp	r3, #16
 8001614:	d029      	beq.n	800166a <get_position+0x8a>
 8001616:	e040      	b.n	800169a <get_position+0xba>
 8001618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800161c:	d033      	beq.n	8001686 <get_position+0xa6>
 800161e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001622:	dc09      	bgt.n	8001638 <get_position+0x58>
 8001624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001628:	d029      	beq.n	800167e <get_position+0x9e>
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162e:	d028      	beq.n	8001682 <get_position+0xa2>
 8001630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001634:	d021      	beq.n	800167a <get_position+0x9a>
 8001636:	e030      	b.n	800169a <get_position+0xba>
 8001638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800163c:	d027      	beq.n	800168e <get_position+0xae>
 800163e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001642:	dc03      	bgt.n	800164c <get_position+0x6c>
 8001644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001648:	d01f      	beq.n	800168a <get_position+0xaa>
 800164a:	e026      	b.n	800169a <get_position+0xba>
 800164c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001650:	d01f      	beq.n	8001692 <get_position+0xb2>
 8001652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001656:	d01e      	beq.n	8001696 <get_position+0xb6>
 8001658:	e01f      	b.n	800169a <get_position+0xba>
	{
	case GPIO_pin0 :
		return 0;
 800165a:	2300      	movs	r3, #0
 800165c:	e01e      	b.n	800169c <get_position+0xbc>
	case GPIO_pin1 :
		return 4;
 800165e:	2304      	movs	r3, #4
 8001660:	e01c      	b.n	800169c <get_position+0xbc>
	case GPIO_pin2 :
		return 8;
 8001662:	2308      	movs	r3, #8
 8001664:	e01a      	b.n	800169c <get_position+0xbc>
	case GPIO_pin3 :
		return 12;
 8001666:	230c      	movs	r3, #12
 8001668:	e018      	b.n	800169c <get_position+0xbc>
	case GPIO_pin4 :
		return 16;
 800166a:	2310      	movs	r3, #16
 800166c:	e016      	b.n	800169c <get_position+0xbc>
	case GPIO_pin5 :
		return 20;
 800166e:	2314      	movs	r3, #20
 8001670:	e014      	b.n	800169c <get_position+0xbc>
	case GPIO_pin6 :
		return 24;
 8001672:	2318      	movs	r3, #24
 8001674:	e012      	b.n	800169c <get_position+0xbc>
	case GPIO_pin7 :
		return 28;
 8001676:	231c      	movs	r3, #28
 8001678:	e010      	b.n	800169c <get_position+0xbc>
	case GPIO_pin8 :
		return 0;
 800167a:	2300      	movs	r3, #0
 800167c:	e00e      	b.n	800169c <get_position+0xbc>
	case GPIO_pin9 :
		return 4;
 800167e:	2304      	movs	r3, #4
 8001680:	e00c      	b.n	800169c <get_position+0xbc>
	case GPIO_pin10 :
		return 8;
 8001682:	2308      	movs	r3, #8
 8001684:	e00a      	b.n	800169c <get_position+0xbc>
	case GPIO_pin11 :
		return 12;
 8001686:	230c      	movs	r3, #12
 8001688:	e008      	b.n	800169c <get_position+0xbc>
	case GPIO_pin12 :
		return 16;
 800168a:	2310      	movs	r3, #16
 800168c:	e006      	b.n	800169c <get_position+0xbc>
	case GPIO_pin13 :
		return 20;
 800168e:	2314      	movs	r3, #20
 8001690:	e004      	b.n	800169c <get_position+0xbc>
	case GPIO_pin14 :
		return 24;
 8001692:	2318      	movs	r3, #24
 8001694:	e002      	b.n	800169c <get_position+0xbc>
	case GPIO_pin15 :
		return 28;
 8001696:	231c      	movs	r3, #28
 8001698:	e000      	b.n	800169c <get_position+0xbc>
	default :
		return 0;
 800169a:	2300      	movs	r3, #0
	}
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <reset_mode_cfn>:

//each pin is configured by 4 pins this function sets the 4 pins to zeros before adjusting the
//proper configuration value for the required mode of the equivalen pin
void reset_mode_cfn(uint32_t*p,uint8_t position)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	70fb      	strb	r3, [r7, #3]
	*p &= ~(0b1111<<position);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	210f      	movs	r1, #15
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	43d2      	mvns	r2, r2
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-
 */

void MCAL_GPIO_Init(GPIO_t *x, GPIO_CONFIG_t *y)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	uint8_t config_value;
	// Check if pin is configured as an output
	if (y->Pin_Mode == GPIO_MODE_General_purpose_output_push_pull ||
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	789b      	ldrb	r3, [r3, #2]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d00b      	beq.n	80016fa <MCAL_GPIO_Init+0x2a>
			y->Pin_Mode == GPIO_MODE_General_purpose_output_Open_drain ||
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	789b      	ldrb	r3, [r3, #2]
	if (y->Pin_Mode == GPIO_MODE_General_purpose_output_push_pull ||
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d007      	beq.n	80016fa <MCAL_GPIO_Init+0x2a>
			y->Pin_Mode == GPIO_MODE_Alternate_function_output_push_pull ||
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	789b      	ldrb	r3, [r3, #2]
			y->Pin_Mode == GPIO_MODE_General_purpose_output_Open_drain ||
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d003      	beq.n	80016fa <MCAL_GPIO_Init+0x2a>
			y->Pin_Mode == GPIO_MODE_Alternate_function_output_Open_drain)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	789b      	ldrb	r3, [r3, #2]
			y->Pin_Mode == GPIO_MODE_Alternate_function_output_push_pull ||
 80016f6:	2b0e      	cmp	r3, #14
 80016f8:	d10b      	bne.n	8001712 <MCAL_GPIO_Init+0x42>
	{

		// If output, combine Pin_Mode and Output_Pin_Speed
		config_value = y->Pin_Mode ;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	789b      	ldrb	r3, [r3, #2]
 80016fe:	75fb      	strb	r3, [r7, #23]
		config_value -=2 ;
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	3b02      	subs	r3, #2
 8001704:	75fb      	strb	r3, [r7, #23]
		config_value += y->Output_Pin_Speed;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	78da      	ldrb	r2, [r3, #3]
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	4413      	add	r3, r2
 800170e:	75fb      	strb	r3, [r7, #23]
 8001710:	e002      	b.n	8001718 <MCAL_GPIO_Init+0x48>

	}
	else
	{
		// If not output, use only Pin_Mode
		config_value = y->Pin_Mode;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	789b      	ldrb	r3, [r3, #2]
 8001716:	75fb      	strb	r3, [r7, #23]
	}


	if (y->Pin_Mode == GPIO_MODE_Input_with_pull_down)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	2b09      	cmp	r3, #9
 800171e:	d102      	bne.n	8001726 <MCAL_GPIO_Init+0x56>
	{
		//decrement the configuration value which was incremented by 1 in header file to differentiate from in_pullup_mode
		config_value--;
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	3b01      	subs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
	}

	// Check if configuration is for a single pin or the whole port
	if (y->Pin_Number != GPIO_port)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d02b      	beq.n	8001786 <MCAL_GPIO_Init+0xb6>
	{
		// Configure a single pin

		// Check if pin is configured by CRL or CRH
		uint32_t *config_pointer = NULL;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
		config_pointer = (y->Pin_Number > (1 << 7)) ? &(x->CRH) : &(x->CRL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	2b80      	cmp	r3, #128	; 0x80
 8001738:	d902      	bls.n	8001740 <MCAL_GPIO_Init+0x70>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3304      	adds	r3, #4
 800173e:	e000      	b.n	8001742 <MCAL_GPIO_Init+0x72>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	613b      	str	r3, [r7, #16]

		// Determine the proper shift value based on pin number
		uint8_t shift_value = get_position(y->Pin_Number);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff49 	bl	80015e0 <get_position>
 800174e:	4603      	mov	r3, r0
 8001750:	73fb      	strb	r3, [r7, #15]

		// Reset mode & cnf bits for the specified pin
		reset_mode_cfn(config_pointer, shift_value);
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	4619      	mov	r1, r3
 8001756:	6938      	ldr	r0, [r7, #16]
 8001758:	f7ff ffa5 	bl	80016a6 <reset_mode_cfn>

		// Set the mode and cnf bits for the specified pin
		*config_pointer |= (config_value << shift_value);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	7df9      	ldrb	r1, [r7, #23]
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	431a      	orrs	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	601a      	str	r2, [r3, #0]

		// Activate pull-up resistor if configured
		if (y->Pin_Mode == GPIO_MODE_Input_with_pull_up)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	2b08      	cmp	r3, #8
 8001774:	d157      	bne.n	8001826 <MCAL_GPIO_Init+0x156>
		{
			x->ODR |= y->Pin_Number;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]

			// Increment the shift value for the next pin
			shift += 4;
		}
	}
}
 8001784:	e04f      	b.n	8001826 <MCAL_GPIO_Init+0x156>
		unsigned char i, shift = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	757b      	strb	r3, [r7, #21]
		for (i = 0; i < 16; i++)
 800178a:	2300      	movs	r3, #0
 800178c:	75bb      	strb	r3, [r7, #22]
 800178e:	e047      	b.n	8001820 <MCAL_GPIO_Init+0x150>
			if (i <= 7)
 8001790:	7dbb      	ldrb	r3, [r7, #22]
 8001792:	2b07      	cmp	r3, #7
 8001794:	d81c      	bhi.n	80017d0 <MCAL_GPIO_Init+0x100>
				reset_mode_cfn(&x->CRL, shift);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7d7a      	ldrb	r2, [r7, #21]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff82 	bl	80016a6 <reset_mode_cfn>
				x->CRL |= (config_value << shift);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	7df9      	ldrb	r1, [r7, #23]
 80017a8:	7d7a      	ldrb	r2, [r7, #21]
 80017aa:	fa01 f202 	lsl.w	r2, r1, r2
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]
				if (y->Pin_Mode == GPIO_MODE_Input_with_pull_up)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	789b      	ldrb	r3, [r3, #2]
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d12b      	bne.n	8001814 <MCAL_GPIO_Init+0x144>
					x->ODR |= (1 << i);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	7dba      	ldrb	r2, [r7, #22]
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	e021      	b.n	8001814 <MCAL_GPIO_Init+0x144>
				if (i == 8)
 80017d0:	7dbb      	ldrb	r3, [r7, #22]
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d101      	bne.n	80017da <MCAL_GPIO_Init+0x10a>
					shift = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	757b      	strb	r3, [r7, #21]
				reset_mode_cfn(&x->CRH, shift);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3304      	adds	r3, #4
 80017de:	7d7a      	ldrb	r2, [r7, #21]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff5f 	bl	80016a6 <reset_mode_cfn>
				x->CRH |= (config_value << shift);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	7df9      	ldrb	r1, [r7, #23]
 80017ee:	7d7a      	ldrb	r2, [r7, #21]
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	605a      	str	r2, [r3, #4]
				if (y->Pin_Mode == GPIO_MODE_Input_with_pull_up)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	789b      	ldrb	r3, [r3, #2]
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d108      	bne.n	8001814 <MCAL_GPIO_Init+0x144>
					x->ODR |= (1 << i);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	7dba      	ldrb	r2, [r7, #22]
 8001808:	2101      	movs	r1, #1
 800180a:	fa01 f202 	lsl.w	r2, r1, r2
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	60da      	str	r2, [r3, #12]
			shift += 4;
 8001814:	7d7b      	ldrb	r3, [r7, #21]
 8001816:	3304      	adds	r3, #4
 8001818:	757b      	strb	r3, [r7, #21]
		for (i = 0; i < 16; i++)
 800181a:	7dbb      	ldrb	r3, [r7, #22]
 800181c:	3301      	adds	r3, #1
 800181e:	75bb      	strb	r3, [r7, #22]
 8001820:	7dbb      	ldrb	r3, [r7, #22]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	d9b4      	bls.n	8001790 <MCAL_GPIO_Init+0xc0>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <button_init>:
extern void East_Pb_IRQ(void);
extern void West_Pb_IRQ(void);


void button_init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0


	// GPIOA  CONFIG
	GPIO_CONFIG_t buttons_configuration;
	buttons_configuration.Pin_Number = North_Push_Button ;
 8001836:	2340      	movs	r3, #64	; 0x40
 8001838:	81bb      	strh	r3, [r7, #12]
	buttons_configuration.Pin_Mode = GPIO_MODE_alternate_function_input;
 800183a:	2304      	movs	r3, #4
 800183c:	73bb      	strb	r3, [r7, #14]
	MCAL_GPIO_Init(GPIOA, & buttons_configuration);
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	4829      	ldr	r0, [pc, #164]	; (80018ec <button_init+0xbc>)
 8001846:	f7ff ff43 	bl	80016d0 <MCAL_GPIO_Init>
	buttons_configuration.Pin_Number = South_Push_Button ;
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, & buttons_configuration);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4619      	mov	r1, r3
 8001854:	4825      	ldr	r0, [pc, #148]	; (80018ec <button_init+0xbc>)
 8001856:	f7ff ff3b 	bl	80016d0 <MCAL_GPIO_Init>
	buttons_configuration.Pin_Number = East_Push_Button ;
 800185a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800185e:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, & buttons_configuration);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4619      	mov	r1, r3
 8001866:	4822      	ldr	r0, [pc, #136]	; (80018f0 <button_init+0xc0>)
 8001868:	f7ff ff32 	bl	80016d0 <MCAL_GPIO_Init>
	buttons_configuration.Pin_Number = West_Push_Button ;
 800186c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001870:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, & buttons_configuration);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4619      	mov	r1, r3
 8001878:	481d      	ldr	r0, [pc, #116]	; (80018f0 <button_init+0xc0>)
 800187a:	f7ff ff29 	bl	80016d0 <MCAL_GPIO_Init>



	//EXTI CONFIG
	EXTI_config_t Push_buttons;
	Push_buttons.interrupt_mode = rising_edge;                  //Generates interrupts when transition to high logic
 800187e:	2301      	movs	r3, #1
 8001880:	71bb      	strb	r3, [r7, #6]
	Push_buttons.pin_and_line_number = 6;
 8001882:	2306      	movs	r3, #6
 8001884:	80bb      	strh	r3, [r7, #4]
	Push_buttons.port = GPIOA;
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <button_init+0xbc>)
 8001888:	603b      	str	r3, [r7, #0]
	Push_buttons.isr_p = North_Pb_IRQ;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <button_init+0xc4>)
 800188c:	60bb      	str	r3, [r7, #8]
	MCAL_EXTI_Init(&Push_buttons);
 800188e:	463b      	mov	r3, r7
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fb2d 	bl	8000ef0 <MCAL_EXTI_Init>

	Push_buttons.pin_and_line_number = 7;
 8001896:	2307      	movs	r3, #7
 8001898:	80bb      	strh	r3, [r7, #4]
	Push_buttons.isr_p = South_Pb_IRQ;
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <button_init+0xc8>)
 800189c:	60bb      	str	r3, [r7, #8]
	MCAL_EXTI_Init(&Push_buttons);
 800189e:	463b      	mov	r3, r7
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb25 	bl	8000ef0 <MCAL_EXTI_Init>

	Push_buttons.pin_and_line_number = 14;
 80018a6:	230e      	movs	r3, #14
 80018a8:	80bb      	strh	r3, [r7, #4]
	Push_buttons.port = GPIOB;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <button_init+0xc0>)
 80018ac:	603b      	str	r3, [r7, #0]
	Push_buttons.isr_p = East_Pb_IRQ;
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <button_init+0xcc>)
 80018b0:	60bb      	str	r3, [r7, #8]
	MCAL_EXTI_Init(&Push_buttons);
 80018b2:	463b      	mov	r3, r7
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fb1b 	bl	8000ef0 <MCAL_EXTI_Init>

	Push_buttons.pin_and_line_number = 15;
 80018ba:	230f      	movs	r3, #15
 80018bc:	80bb      	strh	r3, [r7, #4]
	Push_buttons.isr_p = West_Pb_IRQ;
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <button_init+0xd0>)
 80018c0:	60bb      	str	r3, [r7, #8]
	MCAL_EXTI_Init(&Push_buttons);
 80018c2:	463b      	mov	r3, r7
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fb13 	bl	8000ef0 <MCAL_EXTI_Init>



	//Enable interrupts
	MCAL_EXTI_Enable(EXTI6);
 80018ca:	2006      	movs	r0, #6
 80018cc:	f7ff fbb2 	bl	8001034 <MCAL_EXTI_Enable>
	MCAL_EXTI_Enable(EXTI7);
 80018d0:	2007      	movs	r0, #7
 80018d2:	f7ff fbaf 	bl	8001034 <MCAL_EXTI_Enable>
	MCAL_EXTI_Enable(EXTI14);
 80018d6:	200e      	movs	r0, #14
 80018d8:	f7ff fbac 	bl	8001034 <MCAL_EXTI_Enable>
	MCAL_EXTI_Enable(EXTI15);
 80018dc:	200f      	movs	r0, #15
 80018de:	f7ff fba9 	bl	8001034 <MCAL_EXTI_Enable>



}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40010800 	.word	0x40010800
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	08002381 	.word	0x08002381
 80018f8:	080023a9 	.word	0x080023a9
 80018fc:	080023d1 	.word	0x080023d1
 8001900:	080023f9 	.word	0x080023f9

08001904 <my_delay>:

}


void my_delay(unsigned int i)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  volatile  unsigned int k,j;
  for(k=0; k<i; k++)
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e00b      	b.n	800192a <my_delay+0x26>
  {
     for(j=0; j<255; j++);
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	e002      	b.n	800191e <my_delay+0x1a>
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2bfe      	cmp	r3, #254	; 0xfe
 8001922:	d9f9      	bls.n	8001918 <my_delay+0x14>
  for(k=0; k<i; k++)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d8ef      	bhi.n	8001912 <my_delay+0xe>
  }
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <Lcd_En>:
void Lcd_En(LCD_index i)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	if(i == lcd1)
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d11d      	bne.n	8001988 <Lcd_En+0x4c>
	{
	LCD_CTRL1 |= (1<<En);
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <Lcd_En+0x94>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <Lcd_En+0x94>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	b2d9      	uxtb	r1, r3
 800195e:	7813      	ldrb	r3, [r2, #0]
 8001960:	f361 0342 	bfi	r3, r1, #1, #2
 8001964:	7013      	strb	r3, [r2, #0]
	my_delay(20);
 8001966:	2014      	movs	r0, #20
 8001968:	f7ff ffcc 	bl	8001904 <my_delay>
	LCD_CTRL1 &= ~(1<<En);
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <Lcd_En+0x94>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001974:	b2db      	uxtb	r3, r3
 8001976:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <Lcd_En+0x94>)
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	b2d9      	uxtb	r1, r3
 800197e:	7813      	ldrb	r3, [r2, #0]
 8001980:	f361 0342 	bfi	r3, r1, #1, #2
 8001984:	7013      	strb	r3, [r2, #0]
		LCD_CTRL2 |= (1<<En2);
		my_delay(20);
		LCD_CTRL2 &= ~(1<<En2);

	}
}
 8001986:	e01f      	b.n	80019c8 <Lcd_En+0x8c>
	else if(i == lcd2 )
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d11c      	bne.n	80019c8 <Lcd_En+0x8c>
		LCD_CTRL2 |= (1<<En2);
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <Lcd_En+0x98>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f3c3 2381 	ubfx	r3, r3, #10, #2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <Lcd_En+0x98>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	b2d9      	uxtb	r1, r3
 80019a0:	8813      	ldrh	r3, [r2, #0]
 80019a2:	f361 238b 	bfi	r3, r1, #10, #2
 80019a6:	8013      	strh	r3, [r2, #0]
		my_delay(20);
 80019a8:	2014      	movs	r0, #20
 80019aa:	f7ff ffab 	bl	8001904 <my_delay>
		LCD_CTRL2 &= ~(1<<En2);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <Lcd_En+0x98>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	f3c3 2381 	ubfx	r3, r3, #10, #2
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <Lcd_En+0x98>)
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	b2d9      	uxtb	r1, r3
 80019c0:	8813      	ldrh	r3, [r2, #0]
 80019c2:	f361 238b 	bfi	r3, r1, #10, #2
 80019c6:	8013      	strh	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010c0c 	.word	0x40010c0c
 80019d4:	4001080c 	.word	0x4001080c

080019d8 <lcd_is_busy>:



// Function to check if LCD is busy
void lcd_is_busy(LCD_index i)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
my_delay(50);
 80019e2:	2032      	movs	r0, #50	; 0x32
 80019e4:	f7ff ff8e 	bl	8001904 <my_delay>
if(i == lcd1)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10d      	bne.n	8001a0a <lcd_is_busy+0x32>
LCD_CTRL1 &= ~(1<<RS);
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <lcd_is_busy+0x54>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <lcd_is_busy+0x54>)
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	b2d9      	uxtb	r1, r3
 8001a00:	7813      	ldrb	r3, [r2, #0]
 8001a02:	f361 0342 	bfi	r3, r1, #1, #2
 8001a06:	7013      	strb	r3, [r2, #0]
else
LCD_CTRL2 &= ~(1<<RS2);

}
 8001a08:	e00c      	b.n	8001a24 <lcd_is_busy+0x4c>
LCD_CTRL2 &= ~(1<<RS2);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <lcd_is_busy+0x58>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	f3c3 2381 	ubfx	r3, r3, #10, #2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <lcd_is_busy+0x58>)
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	b2d9      	uxtb	r1, r3
 8001a1c:	8813      	ldrh	r3, [r2, #0]
 8001a1e:	f361 238b 	bfi	r3, r1, #10, #2
 8001a22:	8013      	strh	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40010c0c 	.word	0x40010c0c
 8001a30:	4001080c 	.word	0x4001080c

08001a34 <lcd_send_command>:

void lcd_send_command(unsigned char cmd,LCD_index i)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	460a      	mov	r2, r1
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	4613      	mov	r3, r2
 8001a42:	71bb      	strb	r3, [r7, #6]

	lcd_is_busy(i);
 8001a44:	79bb      	ldrb	r3, [r7, #6]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffc6 	bl	80019d8 <lcd_is_busy>
	if(i == lcd1)
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d127      	bne.n	8001aa2 <lcd_send_command+0x6e>
	{
	Access_pointer1->Lcd_Port = ( (cmd & 0xF0) >> 4);                    // Send higher nibble
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <lcd_send_command+0xc4>)
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	b2d9      	uxtb	r1, r3
 8001a60:	7813      	ldrb	r3, [r2, #0]
 8001a62:	f361 03c6 	bfi	r3, r1, #3, #4
 8001a66:	7013      	strb	r3, [r2, #0]
	LCD_CTRL1 &= ~(1<<RS);
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <lcd_send_command+0xc4>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <lcd_send_command+0xc4>)
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	b2d9      	uxtb	r1, r3
 8001a7a:	7813      	ldrb	r3, [r2, #0]
 8001a7c:	f361 0342 	bfi	r3, r1, #1, #2
 8001a80:	7013      	strb	r3, [r2, #0]
	Lcd_En(lcd1);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff ff5a 	bl	800193c <Lcd_En>
	 Access_pointer1->Lcd_Port = (cmd & 0x0F);                            // Send Lower nibble
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <lcd_send_command+0xc4>)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	b2d9      	uxtb	r1, r3
 8001a92:	7813      	ldrb	r3, [r2, #0]
 8001a94:	f361 03c6 	bfi	r3, r1, #3, #4
 8001a98:	7013      	strb	r3, [r2, #0]
	Lcd_En(lcd1);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff ff4e 	bl	800193c <Lcd_En>
		Lcd_En(lcd2);
		 Access_pointer2->Lcd_Port = (cmd & 0x0F);                            // Send Lower nibble
		Lcd_En(lcd2);

	}
}
 8001aa0:	e026      	b.n	8001af0 <lcd_send_command+0xbc>
		Access_pointer2->Lcd_Port = ( (cmd & 0xF0) >> 4);                    // Send higher nibble
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4a14      	ldr	r2, [pc, #80]	; (8001afc <lcd_send_command+0xc8>)
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	b2d9      	uxtb	r1, r3
 8001ab0:	8813      	ldrh	r3, [r2, #0]
 8001ab2:	f361 330f 	bfi	r3, r1, #12, #4
 8001ab6:	8013      	strh	r3, [r2, #0]
		LCD_CTRL2 &= ~(1<<RS2);
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <lcd_send_command+0xc8>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	f3c3 2381 	ubfx	r3, r3, #10, #2
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <lcd_send_command+0xc8>)
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	b2d9      	uxtb	r1, r3
 8001aca:	8813      	ldrh	r3, [r2, #0]
 8001acc:	f361 238b 	bfi	r3, r1, #10, #2
 8001ad0:	8013      	strh	r3, [r2, #0]
		Lcd_En(lcd2);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f7ff ff32 	bl	800193c <Lcd_En>
		 Access_pointer2->Lcd_Port = (cmd & 0x0F);                            // Send Lower nibble
 8001ad8:	4a08      	ldr	r2, [pc, #32]	; (8001afc <lcd_send_command+0xc8>)
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	b2d9      	uxtb	r1, r3
 8001ae2:	8813      	ldrh	r3, [r2, #0]
 8001ae4:	f361 330f 	bfi	r3, r1, #12, #4
 8001ae8:	8013      	strh	r3, [r2, #0]
		Lcd_En(lcd2);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff ff26 	bl	800193c <Lcd_En>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40010c0c 	.word	0x40010c0c
 8001afc:	4001080c 	.word	0x4001080c

08001b00 <lcd_init>:


// Function to initialize the LCD
void lcd_init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	my_delay(50);
 8001b06:	2032      	movs	r0, #50	; 0x32
 8001b08:	f7ff fefc 	bl	8001904 <my_delay>

    GPIO_CONFIG_t lcd_pin;
    // Set LCD pins as genral purpose output psh-pull
    //set pins for LCD1
    lcd_pin.Pin_Number = GPIO_pin1;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	80bb      	strh	r3, [r7, #4]
    lcd_pin.Pin_Mode = GPIO_MODE_General_purpose_output_push_pull;
 8001b10:	2302      	movs	r3, #2
 8001b12:	71bb      	strb	r3, [r7, #6]
    lcd_pin.Output_Pin_Speed = medium_speed_10Mhz;
 8001b14:	2301      	movs	r3, #1
 8001b16:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_Init(GPIOB, & lcd_pin);
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4868      	ldr	r0, [pc, #416]	; (8001cc0 <lcd_init+0x1c0>)
 8001b1e:	f7ff fdd7 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin2;
 8001b22:	2304      	movs	r3, #4
 8001b24:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOB, & lcd_pin);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4865      	ldr	r0, [pc, #404]	; (8001cc0 <lcd_init+0x1c0>)
 8001b2c:	f7ff fdd0 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin3;
 8001b30:	2308      	movs	r3, #8
 8001b32:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOB, & lcd_pin);
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4861      	ldr	r0, [pc, #388]	; (8001cc0 <lcd_init+0x1c0>)
 8001b3a:	f7ff fdc9 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin4;
 8001b3e:	2310      	movs	r3, #16
 8001b40:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOB, & lcd_pin);
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	485e      	ldr	r0, [pc, #376]	; (8001cc0 <lcd_init+0x1c0>)
 8001b48:	f7ff fdc2 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin5;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOB, & lcd_pin);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	485a      	ldr	r0, [pc, #360]	; (8001cc0 <lcd_init+0x1c0>)
 8001b56:	f7ff fdbb 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin6;
 8001b5a:	2340      	movs	r3, #64	; 0x40
 8001b5c:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOB, & lcd_pin);
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4857      	ldr	r0, [pc, #348]	; (8001cc0 <lcd_init+0x1c0>)
 8001b64:	f7ff fdb4 	bl	80016d0 <MCAL_GPIO_Init>


    //set pins for LCD2
    lcd_pin.Pin_Number = GPIO_pin10;
 8001b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b6c:	80bb      	strh	r3, [r7, #4]
    lcd_pin.Pin_Mode = GPIO_MODE_General_purpose_output_push_pull;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	71bb      	strb	r3, [r7, #6]
    lcd_pin.Output_Pin_Speed = medium_speed_10Mhz;
 8001b72:	2301      	movs	r3, #1
 8001b74:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_Init(GPIOA, & lcd_pin);
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4852      	ldr	r0, [pc, #328]	; (8001cc4 <lcd_init+0x1c4>)
 8001b7c:	f7ff fda8 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin11;
 8001b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b84:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOA, & lcd_pin);
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	484e      	ldr	r0, [pc, #312]	; (8001cc4 <lcd_init+0x1c4>)
 8001b8c:	f7ff fda0 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin12;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOA, & lcd_pin);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	484a      	ldr	r0, [pc, #296]	; (8001cc4 <lcd_init+0x1c4>)
 8001b9c:	f7ff fd98 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin13;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOA, & lcd_pin);
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4846      	ldr	r0, [pc, #280]	; (8001cc4 <lcd_init+0x1c4>)
 8001bac:	f7ff fd90 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin14;
 8001bb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb4:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOA, & lcd_pin);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4842      	ldr	r0, [pc, #264]	; (8001cc4 <lcd_init+0x1c4>)
 8001bbc:	f7ff fd88 	bl	80016d0 <MCAL_GPIO_Init>
    lcd_pin.Pin_Number = GPIO_pin15;
 8001bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc4:	80bb      	strh	r3, [r7, #4]
    MCAL_GPIO_Init(GPIOA, & lcd_pin);
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	483e      	ldr	r0, [pc, #248]	; (8001cc4 <lcd_init+0x1c4>)
 8001bcc:	f7ff fd80 	bl	80016d0 <MCAL_GPIO_Init>



    // Clear control lines
    LCD_CTRL1 &= ~( (1<<RS) | (1<<En));
 8001bd0:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <lcd_init+0x1c8>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001bd8:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <lcd_init+0x1c8>)
 8001bda:	7813      	ldrb	r3, [r2, #0]
 8001bdc:	f36f 0342 	bfc	r3, #1, #2
 8001be0:	7013      	strb	r3, [r2, #0]
    LCD_CTRL2 &= ~( (1<<RS) | (1<<En));
 8001be2:	4b3a      	ldr	r3, [pc, #232]	; (8001ccc <lcd_init+0x1cc>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	f3c3 2381 	ubfx	r3, r3, #10, #2
 8001bea:	4a38      	ldr	r2, [pc, #224]	; (8001ccc <lcd_init+0x1cc>)
 8001bec:	8813      	ldrh	r3, [r2, #0]
 8001bee:	f36f 238b 	bfc	r3, #10, #2
 8001bf2:	8013      	strh	r3, [r2, #0]

    lcd_is_busy(lcd1);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff feef 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_4_bit_mode_init,lcd1);
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2032      	movs	r0, #50	; 0x32
 8001bfe:	f7ff ff19 	bl	8001a34 <lcd_send_command>
    lcd_is_busy(lcd2);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff fee8 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_4_bit_mode_init,lcd2);
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2032      	movs	r0, #50	; 0x32
 8001c0c:	f7ff ff12 	bl	8001a34 <lcd_send_command>
	lcd_is_busy(lcd1);
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff fee1 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_4_bit_2_line,lcd1);
 8001c16:	2100      	movs	r1, #0
 8001c18:	202c      	movs	r0, #44	; 0x2c
 8001c1a:	f7ff ff0b 	bl	8001a34 <lcd_send_command>
    lcd_is_busy(lcd2);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff feda 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_4_bit_2_line,lcd2);
 8001c24:	2101      	movs	r1, #1
 8001c26:	202c      	movs	r0, #44	; 0x2c
 8001c28:	f7ff ff04 	bl	8001a34 <lcd_send_command>
	lcd_is_busy(lcd1);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff fed3 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_clear,lcd1);
 8001c32:	2100      	movs	r1, #0
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7ff fefd 	bl	8001a34 <lcd_send_command>
    lcd_is_busy(lcd2);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f7ff fecc 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_clear,lcd2);
 8001c40:	2101      	movs	r1, #1
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7ff fef6 	bl	8001a34 <lcd_send_command>
	lcd_is_busy(lcd1);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fec5 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_return_home,lcd1);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7ff feef 	bl	8001a34 <lcd_send_command>
    lcd_is_busy(lcd2);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7ff febe 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_return_home,lcd2);
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f7ff fee8 	bl	8001a34 <lcd_send_command>
	lcd_is_busy(lcd1);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff feb7 	bl	80019d8 <lcd_is_busy>
    lcd_send_command(lcd_Entery_mode,lcd1);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2006      	movs	r0, #6
 8001c6e:	f7ff fee1 	bl	8001a34 <lcd_send_command>
    lcd_is_busy(lcd2);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff feb0 	bl	80019d8 <lcd_is_busy>
    lcd_send_command(lcd_Entery_mode,lcd2);
 8001c78:	2101      	movs	r1, #1
 8001c7a:	2006      	movs	r0, #6
 8001c7c:	f7ff feda 	bl	8001a34 <lcd_send_command>
	lcd_is_busy(lcd1);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff fea9 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_display_crouser_blink_on,lcd1);
 8001c86:	2100      	movs	r1, #0
 8001c88:	200f      	movs	r0, #15
 8001c8a:	f7ff fed3 	bl	8001a34 <lcd_send_command>
    lcd_is_busy(lcd2);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7ff fea2 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_display_crouser_blink_on,lcd2);
 8001c94:	2101      	movs	r1, #1
 8001c96:	200f      	movs	r0, #15
 8001c98:	f7ff fecc 	bl	8001a34 <lcd_send_command>
	lcd_is_busy(lcd1);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff fe9b 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_begin_at_first_row,lcd1);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2080      	movs	r0, #128	; 0x80
 8001ca6:	f7ff fec5 	bl	8001a34 <lcd_send_command>
    lcd_is_busy(lcd2);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff fe94 	bl	80019d8 <lcd_is_busy>
	lcd_send_command(lcd_begin_at_first_row,lcd2);
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	2080      	movs	r0, #128	; 0x80
 8001cb4:	f7ff febe 	bl	8001a34 <lcd_send_command>


}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40010c00 	.word	0x40010c00
 8001cc4:	40010800 	.word	0x40010800
 8001cc8:	40010c0c 	.word	0x40010c0c
 8001ccc:	4001080c 	.word	0x4001080c

08001cd0 <lcd_display_char>:

// Function to display a character on the LCD

void lcd_display_char(unsigned char ch,LCD_index i)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]

	if(i == lcd1)
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d12a      	bne.n	8001d3c <lcd_display_char+0x6c>
	{
	lcd_is_busy(lcd1);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff fe76 	bl	80019d8 <lcd_is_busy>
	LCD_CTRL1 |= (1<<RS);
 8001cec:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <lcd_display_char+0xd0>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <lcd_display_char+0xd0>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	b2d9      	uxtb	r1, r3
 8001cfe:	7813      	ldrb	r3, [r2, #0]
 8001d00:	f361 0342 	bfi	r3, r1, #1, #2
 8001d04:	7013      	strb	r3, [r2, #0]
	Access_pointer1->Lcd_Port = ( (ch & 0xF0) >> 4);                    // Send higher nibble
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <lcd_display_char+0xd0>)
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2d9      	uxtb	r1, r3
 8001d14:	7813      	ldrb	r3, [r2, #0]
 8001d16:	f361 03c6 	bfi	r3, r1, #3, #4
 8001d1a:	7013      	strb	r3, [r2, #0]
	Lcd_En(lcd1);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff fe0d 	bl	800193c <Lcd_En>
	Access_pointer1->Lcd_Port = (ch & 0x0F);                            // Send Lower nibble
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <lcd_display_char+0xd0>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	b2d9      	uxtb	r1, r3
 8001d2c:	7813      	ldrb	r3, [r2, #0]
 8001d2e:	f361 03c6 	bfi	r3, r1, #3, #4
 8001d32:	7013      	strb	r3, [r2, #0]
    Lcd_En(lcd1);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff fe01 	bl	800193c <Lcd_En>
		Lcd_En(lcd2);
		Access_pointer2->Lcd_Port = (ch & 0x0F);                            // Send Lower nibble
	    Lcd_En(lcd2);

	}
}
 8001d3a:	e02c      	b.n	8001d96 <lcd_display_char+0xc6>
	else if (i == lcd2)
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d129      	bne.n	8001d96 <lcd_display_char+0xc6>
		lcd_is_busy(lcd2);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f7ff fe48 	bl	80019d8 <lcd_is_busy>
		LCD_CTRL2 |= (1<<RS);
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <lcd_display_char+0xd4>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	f3c3 2381 	ubfx	r3, r3, #10, #2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <lcd_display_char+0xd4>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	b2d9      	uxtb	r1, r3
 8001d5a:	8813      	ldrh	r3, [r2, #0]
 8001d5c:	f361 238b 	bfi	r3, r1, #10, #2
 8001d60:	8013      	strh	r3, [r2, #0]
		Access_pointer2->Lcd_Port = ( (ch & 0xF0) >> 4);                    // Send higher nibble
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <lcd_display_char+0xd4>)
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	b2d9      	uxtb	r1, r3
 8001d70:	8813      	ldrh	r3, [r2, #0]
 8001d72:	f361 330f 	bfi	r3, r1, #12, #4
 8001d76:	8013      	strh	r3, [r2, #0]
		Lcd_En(lcd2);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff fddf 	bl	800193c <Lcd_En>
		Access_pointer2->Lcd_Port = (ch & 0x0F);                            // Send Lower nibble
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <lcd_display_char+0xd4>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	b2d9      	uxtb	r1, r3
 8001d88:	8813      	ldrh	r3, [r2, #0]
 8001d8a:	f361 330f 	bfi	r3, r1, #12, #4
 8001d8e:	8013      	strh	r3, [r2, #0]
	    Lcd_En(lcd2);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f7ff fdd3 	bl	800193c <Lcd_En>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40010c0c 	.word	0x40010c0c
 8001da4:	4001080c 	.word	0x4001080c

08001da8 <lcd_display_sentence>:

void lcd_display_sentence(unsigned char*p,LCD_index i)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	char index=0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
	while(p[index])
 8001db8:	e027      	b.n	8001e0a <lcd_display_sentence+0x62>
	{
		lcd_is_busy(i);
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fe0b 	bl	80019d8 <lcd_is_busy>
		if(index == 16)
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d104      	bne.n	8001dd2 <lcd_display_sentence+0x2a>
		{
		lcd_send_command(lcd_begin_at_seconed_row,i);
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	20c0      	movs	r0, #192	; 0xc0
 8001dce:	f7ff fe31 	bl	8001a34 <lcd_send_command>
		}
		if(index == 32)
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d104      	bne.n	8001de2 <lcd_display_sentence+0x3a>
		{
		lcd_send_command(lcd_begin_at_third_row,i);
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	2090      	movs	r0, #144	; 0x90
 8001dde:	f7ff fe29 	bl	8001a34 <lcd_send_command>
		}
		if(index == 48)
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	2b30      	cmp	r3, #48	; 0x30
 8001de6:	d104      	bne.n	8001df2 <lcd_display_sentence+0x4a>
		{
		lcd_send_command(lcd_begin_at_fourth_row,i);
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	4619      	mov	r1, r3
 8001dec:	20d0      	movs	r0, #208	; 0xd0
 8001dee:	f7ff fe21 	bl	8001a34 <lcd_send_command>
		}

	lcd_display_char(p[index],i);
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff66 	bl	8001cd0 <lcd_display_char>
	index++;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	3301      	adds	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
	while(p[index])
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1d1      	bne.n	8001dba <lcd_display_sentence+0x12>
	}
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <clock_init>:

/////////////////////////////////////////////////// " Initialization functions " ///////////////////////////////////////////////////////////////////////////


void clock_init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

	HW_INIT()      ;    //adjust clock for system which is left as default 8 Mhz
 8001e24:	f7fe fa06 	bl	8000234 <HW_INIT>
	GPIOA_CLK_EN() ;    //Enable clock for GPIOA
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <clock_init+0x30>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <clock_init+0x30>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
	GPIOB_CLK_EN() ;    //Enable clock for GPIOB
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <clock_init+0x30>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <clock_init+0x30>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN()  ;    //Enable clock for AFIO
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <clock_init+0x30>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a02      	ldr	r2, [pc, #8]	; (8001e50 <clock_init+0x30>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6193      	str	r3, [r2, #24]


}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000

08001e54 <Hard_Ware_init>:

void Hard_Ware_init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	lcd_init();
 8001e58:	f7ff fe52 	bl	8001b00 <lcd_init>
	traffic_light_init();
 8001e5c:	f000 fae0 	bl	8002420 <traffic_light_init>
	button_init();
 8001e60:	f7ff fce6 	bl	8001830 <button_init>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <task1_fun>:
// task1 is used to activate t2 when interrupt occur

volatile int index1 = 0;
void task1_fun()

{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
	volatile int i  ;
	while(1)
	{
       // activating t2 to handle the request
 		if(number_of_active_requests  && !t2_status)
 8001e6e:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <task1_fun+0x14c>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <task1_fun+0x26>
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <task1_fun+0x150>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <task1_fun+0x26>
		{
			t2_status = 1;
 8001e82:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <task1_fun+0x150>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
			Nabil_Activate_task(&t2);
 8001e88:	484c      	ldr	r0, [pc, #304]	; (8001fbc <task1_fun+0x154>)
 8001e8a:	f7fe fe53 	bl	8000b34 <Nabil_Activate_task>

		}
 		// acquire mutex before accessing the shared resoure which is mail  box
		Nabil_Rtos_Aquire_Mutex(&m1, &t1);
 8001e8e:	494c      	ldr	r1, [pc, #304]	; (8001fc0 <task1_fun+0x158>)
 8001e90:	484c      	ldr	r0, [pc, #304]	; (8001fc4 <task1_fun+0x15c>)
 8001e92:	f7fe fec4 	bl	8000c1e <Nabil_Rtos_Aquire_Mutex>
		// check if there's a msg in the mail
		if(!Signaling_traffic.semaphore_flag && ( mail_box[0] != -1 || mail_box[1] != -1))
 8001e96:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <task1_fun+0x160>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d154      	bne.n	8001f4a <task1_fun+0xe2>
 8001ea0:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <task1_fun+0x164>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea8:	d104      	bne.n	8001eb4 <task1_fun+0x4c>
 8001eaa:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <task1_fun+0x164>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb2:	d04a      	beq.n	8001f4a <task1_fun+0xe2>
		{
			// when there is a msg check number and msg location and then execute it
			if (mail_box[0] != -1 && mail_box[1] != -1)
 8001eb4:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <task1_fun+0x164>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d00e      	beq.n	8001edc <task1_fun+0x74>
 8001ebe:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <task1_fun+0x164>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec6:	d009      	beq.n	8001edc <task1_fun+0x74>
			{
				traffic_light_update(North_South_East_West_Red_on);
 8001ec8:	2004      	movs	r0, #4
 8001eca:	f000 fb1b 	bl	8002504 <traffic_light_update>
				// unlcoking semaphores of lcds to notify t2
				Nabil_Rtos_unLock_Semaphore(&Signaling_lcd1);
 8001ece:	4840      	ldr	r0, [pc, #256]	; (8001fd0 <task1_fun+0x168>)
 8001ed0:	f7fe fbc5 	bl	800065e <Nabil_Rtos_unLock_Semaphore>
				Nabil_Rtos_unLock_Semaphore(&Signaling_lcd2);
 8001ed4:	483f      	ldr	r0, [pc, #252]	; (8001fd4 <task1_fun+0x16c>)
 8001ed6:	f7fe fbc2 	bl	800065e <Nabil_Rtos_unLock_Semaphore>
 8001eda:	e036      	b.n	8001f4a <task1_fun+0xe2>

			}
			else if(mail_box[0] != -1 && mail_box[1] == -1)
 8001edc:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <task1_fun+0x164>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d016      	beq.n	8001f14 <task1_fun+0xac>
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <task1_fun+0x164>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eee:	d111      	bne.n	8001f14 <task1_fun+0xac>
			{
				traffic_light_update(mail_box[0]);
 8001ef0:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <task1_fun+0x164>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fb04 	bl	8002504 <traffic_light_update>
				if(mail_box[0] == East_west_green_on)
 8001efc:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <task1_fun+0x164>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d103      	bne.n	8001f0c <task1_fun+0xa4>
					Nabil_Rtos_unLock_Semaphore(&Signaling_lcd1);
 8001f04:	4832      	ldr	r0, [pc, #200]	; (8001fd0 <task1_fun+0x168>)
 8001f06:	f7fe fbaa 	bl	800065e <Nabil_Rtos_unLock_Semaphore>
				if(mail_box[0] == East_west_green_on)
 8001f0a:	e01e      	b.n	8001f4a <task1_fun+0xe2>
				else
					Nabil_Rtos_unLock_Semaphore(&Signaling_lcd2);
 8001f0c:	4831      	ldr	r0, [pc, #196]	; (8001fd4 <task1_fun+0x16c>)
 8001f0e:	f7fe fba6 	bl	800065e <Nabil_Rtos_unLock_Semaphore>
				if(mail_box[0] == East_west_green_on)
 8001f12:	e01a      	b.n	8001f4a <task1_fun+0xe2>


			}
			else if(mail_box[0] == -1 && mail_box[1] != -1)
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <task1_fun+0x164>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d115      	bne.n	8001f4a <task1_fun+0xe2>
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <task1_fun+0x164>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f26:	d010      	beq.n	8001f4a <task1_fun+0xe2>
			{
				traffic_light_update(mail_box[1]);
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <task1_fun+0x164>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fae8 	bl	8002504 <traffic_light_update>
				if(mail_box[1] == East_west_green_on)
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <task1_fun+0x164>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d103      	bne.n	8001f44 <task1_fun+0xdc>
					Nabil_Rtos_unLock_Semaphore(&Signaling_lcd1);
 8001f3c:	4824      	ldr	r0, [pc, #144]	; (8001fd0 <task1_fun+0x168>)
 8001f3e:	f7fe fb8e 	bl	800065e <Nabil_Rtos_unLock_Semaphore>
 8001f42:	e002      	b.n	8001f4a <task1_fun+0xe2>
				else
					Nabil_Rtos_unLock_Semaphore(&Signaling_lcd2);
 8001f44:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <task1_fun+0x16c>)
 8001f46:	f7fe fb8a 	bl	800065e <Nabil_Rtos_unLock_Semaphore>
			}


		}
		// release mutex
		Nabil_Rtos_Release_Mutex(&m1);
 8001f4a:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <task1_fun+0x15c>)
 8001f4c:	f7fe fe89 	bl	8000c62 <Nabil_Rtos_Release_Mutex>
		// normal operation
		for(i = index1 ; i < 4 ; i++)
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <task1_fun+0x170>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	e026      	b.n	8001fa6 <task1_fun+0x13e>
		{
			if(Signaling_traffic.semaphore_flag)
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <task1_fun+0x160>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d025      	beq.n	8001fae <task1_fun+0x146>
			{
				// this line was added to make task1 complete execution from where it stopped.
				index1 = i;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <task1_fun+0x170>)
 8001f66:	6013      	str	r3, [r2, #0]
				if(index1 == 3)
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <task1_fun+0x170>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d102      	bne.n	8001f76 <task1_fun+0x10e>
				{
					index1 = 0 ;
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <task1_fun+0x170>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
				}
				traffic_light_update(all_possible_status[i].leds_status);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <task1_fun+0x174>)
 8001f7a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fac0 	bl	8002504 <traffic_light_update>
				Nabil_RTOS_Task_wait(all_possible_status[i].remaining_time*1000 , &t1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <task1_fun+0x174>)
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	785b      	ldrb	r3, [r3, #1]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f94:	fb03 f302 	mul.w	r3, r3, r2
 8001f98:	4909      	ldr	r1, [pc, #36]	; (8001fc0 <task1_fun+0x158>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fd72 	bl	8000a84 <Nabil_RTOS_Task_wait>
		for(i = index1 ; i < 4 ; i++)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	ddd5      	ble.n	8001f58 <task1_fun+0xf0>
 8001fac:	e75f      	b.n	8001e6e <task1_fun+0x6>
			}
			else
				break;
 8001fae:	bf00      	nop
 		if(number_of_active_requests  && !t2_status)
 8001fb0:	e75d      	b.n	8001e6e <task1_fun+0x6>
 8001fb2:	bf00      	nop
 8001fb4:	200000d0 	.word	0x200000d0
 8001fb8:	200000c4 	.word	0x200000c4
 8001fbc:	20000510 	.word	0x20000510
 8001fc0:	200005b4 	.word	0x200005b4
 8001fc4:	20000604 	.word	0x20000604
 8001fc8:	2000000c 	.word	0x2000000c
 8001fcc:	20000090 	.word	0x20000090
 8001fd0:	20000038 	.word	0x20000038
 8001fd4:	20000064 	.word	0x20000064
 8001fd8:	200000d4 	.word	0x200000d4
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <task2_fun>:


/////////////////////////////////////////////////////////////task2 function//////////////////////////////////////////////////////////////////////////////////////

void task2_fun()
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

	while(1)
	{


		if(t1.task_state == suspended && number_of_active_requests)
 8001fe4:	4ba4      	ldr	r3, [pc, #656]	; (8002278 <task2_fun+0x298>)
 8001fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d107      	bne.n	8001ffe <task2_fun+0x1e>
 8001fee:	4ba3      	ldr	r3, [pc, #652]	; (800227c <task2_fun+0x29c>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <task2_fun+0x1e>
		{
			Nabil_Activate_task(&t1);
 8001ff8:	489f      	ldr	r0, [pc, #636]	; (8002278 <task2_fun+0x298>)
 8001ffa:	f7fe fd9b 	bl	8000b34 <Nabil_Activate_task>
		}

		switch(push_button_interrupt_soure)
 8001ffe:	4ba0      	ldr	r3, [pc, #640]	; (8002280 <task2_fun+0x2a0>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b03      	cmp	r3, #3
 8002006:	f200 80b5 	bhi.w	8002174 <task2_fun+0x194>
 800200a:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <task2_fun+0x30>)
 800200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002010:	08002021 	.word	0x08002021
 8002014:	08002021 	.word	0x08002021
 8002018:	080020d5 	.word	0x080020d5
 800201c:	080020d5 	.word	0x080020d5
		{
		case north :
		case south :
			Nabil_Rtos_Aquire_Mutex(&m1, &t2);
 8002020:	4998      	ldr	r1, [pc, #608]	; (8002284 <task2_fun+0x2a4>)
 8002022:	4899      	ldr	r0, [pc, #612]	; (8002288 <task2_fun+0x2a8>)
 8002024:	f7fe fdfb 	bl	8000c1e <Nabil_Rtos_Aquire_Mutex>
			if(mail_box[0] == -1)
 8002028:	4b98      	ldr	r3, [pc, #608]	; (800228c <task2_fun+0x2ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d125      	bne.n	800207e <task2_fun+0x9e>
			{
				mail_box[0] = East_west_green_on;
 8002032:	4b96      	ldr	r3, [pc, #600]	; (800228c <task2_fun+0x2ac>)
 8002034:	2202      	movs	r2, #2
 8002036:	601a      	str	r2, [r3, #0]
				Nabil_Rtos_Release_Mutex(&m1);
 8002038:	4893      	ldr	r0, [pc, #588]	; (8002288 <task2_fun+0x2a8>)
 800203a:	f7fe fe12 	bl	8000c62 <Nabil_Rtos_Release_Mutex>
				// locking that semaphore notify task1 to check the mail box
				Nabil_Rtos_Lock_Semaphore(&Signaling_traffic);
 800203e:	4894      	ldr	r0, [pc, #592]	; (8002290 <task2_fun+0x2b0>)
 8002040:	f7fe fb00 	bl	8000644 <Nabil_Rtos_Lock_Semaphore>
				// waiting task1 to unlock LCD semaphore to notify pedestrian they can wa;l
				while(! check_Semaphore(&Signaling_lcd1));
 8002044:	bf00      	nop
 8002046:	4893      	ldr	r0, [pc, #588]	; (8002294 <task2_fun+0x2b4>)
 8002048:	f7fe fb16 	bl	8000678 <check_Semaphore>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f9      	beq.n	8002046 <task2_fun+0x66>
				// lock the semaphore again for next requests
				Nabil_Rtos_Lock_Semaphore(&Signaling_lcd1);
 8002052:	4890      	ldr	r0, [pc, #576]	; (8002294 <task2_fun+0x2b4>)
 8002054:	f7fe faf6 	bl	8000644 <Nabil_Rtos_Lock_Semaphore>
				// delay for 30 sec to allow crossing the road
				req1_delay = 15000 ;
 8002058:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <task2_fun+0x2b8>)
 800205a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800205e:	601a      	str	r2, [r3, #0]
				// disable north_south interrupt request
				OS_SVC_Set(6);
 8002060:	2006      	movs	r0, #6
 8002062:	f7fe fa13 	bl	800048c <OS_SVC_Set>
				north_south_IR_disable_time = 22500;           // disable interrupts for 45 sec. to allow smooth traffic in all directions
 8002066:	4b8d      	ldr	r3, [pc, #564]	; (800229c <task2_fun+0x2bc>)
 8002068:	f245 72e4 	movw	r2, #22500	; 0x57e4
 800206c:	601a      	str	r2, [r3, #0]
				push_button_interrupt_soure = interrupt_handled;
 800206e:	4b84      	ldr	r3, [pc, #528]	; (8002280 <task2_fun+0x2a0>)
 8002070:	2204      	movs	r2, #4
 8002072:	701a      	strb	r2, [r3, #0]
				lcd_display_sentence("pedestrian can cross NORTH / SOUTH way ", lcd1);
 8002074:	2100      	movs	r1, #0
 8002076:	488a      	ldr	r0, [pc, #552]	; (80022a0 <task2_fun+0x2c0>)
 8002078:	f7ff fe96 	bl	8001da8 <lcd_display_sentence>
				north_south_IR_disable_time = 22500;           // disable interrupts for 45 sec. to allow smooth traffic in all directions
				push_button_interrupt_soure = interrupt_handled;
				lcd_display_sentence("pedestrian can cross NORTH / SOUTH way ", lcd1);
			}

			break;
 800207c:	e07c      	b.n	8002178 <task2_fun+0x198>
			else if(mail_box[1] == -1)
 800207e:	4b83      	ldr	r3, [pc, #524]	; (800228c <task2_fun+0x2ac>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002086:	d177      	bne.n	8002178 <task2_fun+0x198>
				mail_box[1] = East_west_green_on;
 8002088:	4b80      	ldr	r3, [pc, #512]	; (800228c <task2_fun+0x2ac>)
 800208a:	2202      	movs	r2, #2
 800208c:	605a      	str	r2, [r3, #4]
				Nabil_Rtos_Release_Mutex(&m1);
 800208e:	487e      	ldr	r0, [pc, #504]	; (8002288 <task2_fun+0x2a8>)
 8002090:	f7fe fde7 	bl	8000c62 <Nabil_Rtos_Release_Mutex>
				Nabil_Rtos_Lock_Semaphore(&Signaling_traffic);
 8002094:	487e      	ldr	r0, [pc, #504]	; (8002290 <task2_fun+0x2b0>)
 8002096:	f7fe fad5 	bl	8000644 <Nabil_Rtos_Lock_Semaphore>
				while(! check_Semaphore(&Signaling_lcd1));
 800209a:	bf00      	nop
 800209c:	487d      	ldr	r0, [pc, #500]	; (8002294 <task2_fun+0x2b4>)
 800209e:	f7fe faeb 	bl	8000678 <check_Semaphore>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f9      	beq.n	800209c <task2_fun+0xbc>
				Nabil_Rtos_Lock_Semaphore(&Signaling_lcd1);
 80020a8:	487a      	ldr	r0, [pc, #488]	; (8002294 <task2_fun+0x2b4>)
 80020aa:	f7fe facb 	bl	8000644 <Nabil_Rtos_Lock_Semaphore>
				req2_delay = 15000;
 80020ae:	4b7d      	ldr	r3, [pc, #500]	; (80022a4 <task2_fun+0x2c4>)
 80020b0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80020b4:	601a      	str	r2, [r3, #0]
				OS_SVC_Set(6);
 80020b6:	2006      	movs	r0, #6
 80020b8:	f7fe f9e8 	bl	800048c <OS_SVC_Set>
				north_south_IR_disable_time = 22500;           // disable interrupts for 45 sec. to allow smooth traffic in all directions
 80020bc:	4b77      	ldr	r3, [pc, #476]	; (800229c <task2_fun+0x2bc>)
 80020be:	f245 72e4 	movw	r2, #22500	; 0x57e4
 80020c2:	601a      	str	r2, [r3, #0]
				push_button_interrupt_soure = interrupt_handled;
 80020c4:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <task2_fun+0x2a0>)
 80020c6:	2204      	movs	r2, #4
 80020c8:	701a      	strb	r2, [r3, #0]
				lcd_display_sentence("pedestrian can cross NORTH / SOUTH way ", lcd1);
 80020ca:	2100      	movs	r1, #0
 80020cc:	4874      	ldr	r0, [pc, #464]	; (80022a0 <task2_fun+0x2c0>)
 80020ce:	f7ff fe6b 	bl	8001da8 <lcd_display_sentence>
			break;
 80020d2:	e051      	b.n	8002178 <task2_fun+0x198>
		case east :
		case west :
			if(mail_box[0] == -1)
 80020d4:	4b6d      	ldr	r3, [pc, #436]	; (800228c <task2_fun+0x2ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d122      	bne.n	8002124 <task2_fun+0x144>
			{
				mail_box[0] = North_south_green_on;
 80020de:	4b6b      	ldr	r3, [pc, #428]	; (800228c <task2_fun+0x2ac>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
				Nabil_Rtos_Lock_Semaphore(&Signaling_traffic);
 80020e4:	486a      	ldr	r0, [pc, #424]	; (8002290 <task2_fun+0x2b0>)
 80020e6:	f7fe faad 	bl	8000644 <Nabil_Rtos_Lock_Semaphore>
				while(! check_Semaphore(&Signaling_lcd2));
 80020ea:	bf00      	nop
 80020ec:	486e      	ldr	r0, [pc, #440]	; (80022a8 <task2_fun+0x2c8>)
 80020ee:	f7fe fac3 	bl	8000678 <check_Semaphore>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f9      	beq.n	80020ec <task2_fun+0x10c>
				Nabil_Rtos_Lock_Semaphore(&Signaling_lcd2);
 80020f8:	486b      	ldr	r0, [pc, #428]	; (80022a8 <task2_fun+0x2c8>)
 80020fa:	f7fe faa3 	bl	8000644 <Nabil_Rtos_Lock_Semaphore>
				req1_delay = 15000 ;                           // delay for 30 sec to allow crossing the road
 80020fe:	4b66      	ldr	r3, [pc, #408]	; (8002298 <task2_fun+0x2b8>)
 8002100:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002104:	601a      	str	r2, [r3, #0]
				OS_SVC_Set(8);
 8002106:	2008      	movs	r0, #8
 8002108:	f7fe f9c0 	bl	800048c <OS_SVC_Set>
				east_west_IR_disable_time = 22500;           // disable interrupts for 45 sec. to allow smooth traffic in all directions
 800210c:	4b67      	ldr	r3, [pc, #412]	; (80022ac <task2_fun+0x2cc>)
 800210e:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8002112:	601a      	str	r2, [r3, #0]
				push_button_interrupt_soure = interrupt_handled;
 8002114:	4b5a      	ldr	r3, [pc, #360]	; (8002280 <task2_fun+0x2a0>)
 8002116:	2204      	movs	r2, #4
 8002118:	701a      	strb	r2, [r3, #0]
				lcd_display_sentence("pedestrian can cross East / West way ", lcd2);
 800211a:	2101      	movs	r1, #1
 800211c:	4864      	ldr	r0, [pc, #400]	; (80022b0 <task2_fun+0x2d0>)
 800211e:	f7ff fe43 	bl	8001da8 <lcd_display_sentence>
				east_west_IR_disable_time = 22500;           // disable interrupts for 45 sec. to allow smooth traffic in all directions
				push_button_interrupt_soure = interrupt_handled;
				lcd_display_sentence("pedestrian can cross East / West way ", lcd2);
			}

			break;
 8002122:	e02b      	b.n	800217c <task2_fun+0x19c>
			else if(mail_box[1] == -1)
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <task2_fun+0x2ac>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d126      	bne.n	800217c <task2_fun+0x19c>
				mail_box[1] = North_south_green_on;
 800212e:	4b57      	ldr	r3, [pc, #348]	; (800228c <task2_fun+0x2ac>)
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
				Nabil_Rtos_Lock_Semaphore(&Signaling_traffic);
 8002134:	4856      	ldr	r0, [pc, #344]	; (8002290 <task2_fun+0x2b0>)
 8002136:	f7fe fa85 	bl	8000644 <Nabil_Rtos_Lock_Semaphore>
				while(! check_Semaphore(&Signaling_lcd2));
 800213a:	bf00      	nop
 800213c:	485a      	ldr	r0, [pc, #360]	; (80022a8 <task2_fun+0x2c8>)
 800213e:	f7fe fa9b 	bl	8000678 <check_Semaphore>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f9      	beq.n	800213c <task2_fun+0x15c>
				Nabil_Rtos_Lock_Semaphore(&Signaling_lcd2);
 8002148:	4857      	ldr	r0, [pc, #348]	; (80022a8 <task2_fun+0x2c8>)
 800214a:	f7fe fa7b 	bl	8000644 <Nabil_Rtos_Lock_Semaphore>
				req2_delay = 15000;
 800214e:	4b55      	ldr	r3, [pc, #340]	; (80022a4 <task2_fun+0x2c4>)
 8002150:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002154:	601a      	str	r2, [r3, #0]
				OS_SVC_Set(8);
 8002156:	2008      	movs	r0, #8
 8002158:	f7fe f998 	bl	800048c <OS_SVC_Set>
				east_west_IR_disable_time = 22500;           // disable interrupts for 45 sec. to allow smooth traffic in all directions
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <task2_fun+0x2cc>)
 800215e:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8002162:	601a      	str	r2, [r3, #0]
				push_button_interrupt_soure = interrupt_handled;
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <task2_fun+0x2a0>)
 8002166:	2204      	movs	r2, #4
 8002168:	701a      	strb	r2, [r3, #0]
				lcd_display_sentence("pedestrian can cross East / West way ", lcd2);
 800216a:	2101      	movs	r1, #1
 800216c:	4850      	ldr	r0, [pc, #320]	; (80022b0 <task2_fun+0x2d0>)
 800216e:	f7ff fe1b 	bl	8001da8 <lcd_display_sentence>
			break;
 8002172:	e003      	b.n	800217c <task2_fun+0x19c>
		case interrupt_handled :
		default :
			break;
 8002174:	bf00      	nop
 8002176:	e002      	b.n	800217e <task2_fun+0x19e>
			break;
 8002178:	bf00      	nop
 800217a:	e000      	b.n	800217e <task2_fun+0x19e>
			break;
 800217c:	bf00      	nop
		}

		Nabil_Rtos_Aquire_Mutex(&m1, &t2);
 800217e:	4941      	ldr	r1, [pc, #260]	; (8002284 <task2_fun+0x2a4>)
 8002180:	4841      	ldr	r0, [pc, #260]	; (8002288 <task2_fun+0x2a8>)
 8002182:	f7fe fd4c 	bl	8000c1e <Nabil_Rtos_Aquire_Mutex>
		if(!req1_delay && mail_box[0] != -1)
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <task2_fun+0x2b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d11c      	bne.n	80021c8 <task2_fun+0x1e8>
 800218e:	4b3f      	ldr	r3, [pc, #252]	; (800228c <task2_fun+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d017      	beq.n	80021c8 <task2_fun+0x1e8>
		{

			if(mail_box[0] == North_south_green_on)
 8002198:	4b3c      	ldr	r3, [pc, #240]	; (800228c <task2_fun+0x2ac>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d104      	bne.n	80021aa <task2_fun+0x1ca>
			{
				lcd_send_command(lcd_clear, lcd2);
 80021a0:	2101      	movs	r1, #1
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff fc46 	bl	8001a34 <lcd_send_command>
 80021a8:	e003      	b.n	80021b2 <task2_fun+0x1d2>
			}
			else
			{
				lcd_send_command(lcd_clear, lcd1);
 80021aa:	2100      	movs	r1, #0
 80021ac:	2001      	movs	r0, #1
 80021ae:	f7ff fc41 	bl	8001a34 <lcd_send_command>
			}
			mail_box[0] = -1;
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <task2_fun+0x2ac>)
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	601a      	str	r2, [r3, #0]
			number_of_active_requests --;
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <task2_fun+0x29c>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <task2_fun+0x29c>)
 80021c6:	701a      	strb	r2, [r3, #0]

		}
		if(!req2_delay && mail_box[1] != -1)
 80021c8:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <task2_fun+0x2c4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d11c      	bne.n	800220a <task2_fun+0x22a>
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <task2_fun+0x2ac>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d017      	beq.n	800220a <task2_fun+0x22a>
		{

			if(mail_box[1] == North_south_green_on)
 80021da:	4b2c      	ldr	r3, [pc, #176]	; (800228c <task2_fun+0x2ac>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d104      	bne.n	80021ec <task2_fun+0x20c>
			{
				lcd_send_command(lcd_clear, lcd2);
 80021e2:	2101      	movs	r1, #1
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff fc25 	bl	8001a34 <lcd_send_command>
 80021ea:	e003      	b.n	80021f4 <task2_fun+0x214>
			}
			else
			{
				lcd_send_command(lcd_clear, lcd1);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff fc20 	bl	8001a34 <lcd_send_command>
			}
			mail_box[1] = -1;
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <task2_fun+0x2ac>)
 80021f6:	f04f 32ff 	mov.w	r2, #4294967295
 80021fa:	605a      	str	r2, [r3, #4]

			number_of_active_requests --;
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <task2_fun+0x29c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <task2_fun+0x29c>)
 8002208:	701a      	strb	r2, [r3, #0]
		}
		if(!req1_delay && !req2_delay )
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <task2_fun+0x2b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d114      	bne.n	800223c <task2_fun+0x25c>
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <task2_fun+0x2c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d110      	bne.n	800223c <task2_fun+0x25c>
		{
			mail_box[0] = -1;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <task2_fun+0x2ac>)
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	601a      	str	r2, [r3, #0]
			mail_box[1] = -1;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <task2_fun+0x2ac>)
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	605a      	str	r2, [r3, #4]
			number_of_active_requests = 0;
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <task2_fun+0x29c>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
			Nabil_Rtos_unLock_Semaphore(&Signaling_traffic);
 8002230:	4817      	ldr	r0, [pc, #92]	; (8002290 <task2_fun+0x2b0>)
 8002232:	f7fe fa14 	bl	800065e <Nabil_Rtos_unLock_Semaphore>
			t2_status = 0;
 8002236:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <task2_fun+0x2d4>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
		}
		Nabil_Rtos_Release_Mutex(&m1);
 800223c:	4812      	ldr	r0, [pc, #72]	; (8002288 <task2_fun+0x2a8>)
 800223e:	f7fe fd10 	bl	8000c62 <Nabil_Rtos_Release_Mutex>
		if(! north_south_IR_disable_time && !east_west_IR_disable_time && check_Semaphore(&Signaling_traffic) )                       // allow interrupts again after the delay time finished
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <task2_fun+0x2bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f47f aecc 	bne.w	8001fe4 <task2_fun+0x4>
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <task2_fun+0x2cc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f aec7 	bne.w	8001fe4 <task2_fun+0x4>
 8002256:	480e      	ldr	r0, [pc, #56]	; (8002290 <task2_fun+0x2b0>)
 8002258:	f7fe fa0e 	bl	8000678 <check_Semaphore>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	f43f aec0 	beq.w	8001fe4 <task2_fun+0x4>
		{
			OS_SVC_Set(5);
 8002264:	2005      	movs	r0, #5
 8002266:	f7fe f911 	bl	800048c <OS_SVC_Set>
			OS_SVC_Set(7);
 800226a:	2007      	movs	r0, #7
 800226c:	f7fe f90e 	bl	800048c <OS_SVC_Set>
			Nabil_Terminate_task(&t2);
 8002270:	4804      	ldr	r0, [pc, #16]	; (8002284 <task2_fun+0x2a4>)
 8002272:	f7fe fc6f 	bl	8000b54 <Nabil_Terminate_task>
		if(t1.task_state == suspended && number_of_active_requests)
 8002276:	e6b5      	b.n	8001fe4 <task2_fun+0x4>
 8002278:	200005b4 	.word	0x200005b4
 800227c:	200000d0 	.word	0x200000d0
 8002280:	200005b0 	.word	0x200005b0
 8002284:	20000510 	.word	0x20000510
 8002288:	20000604 	.word	0x20000604
 800228c:	20000090 	.word	0x20000090
 8002290:	2000000c 	.word	0x2000000c
 8002294:	20000038 	.word	0x20000038
 8002298:	200000bc 	.word	0x200000bc
 800229c:	200000c8 	.word	0x200000c8
 80022a0:	08002684 	.word	0x08002684
 80022a4:	200000c0 	.word	0x200000c0
 80022a8:	20000064 	.word	0x20000064
 80022ac:	200000cc 	.word	0x200000cc
 80022b0:	080026ac 	.word	0x080026ac
 80022b4:	200000c4 	.word	0x200000c4

080022b8 <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int main(void)

{
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	af00      	add	r7, sp, #0

//==================================================== intilization========================================================================//
	clock_init();
 80022bc:	f7ff fdb0 	bl	8001e20 <clock_init>
	Hard_Ware_init();
 80022c0:	f7ff fdc8 	bl	8001e54 <Hard_Ware_init>
	My_RTOS_Init() ;
 80022c4:	f7fe fba4 	bl	8000a10 <My_RTOS_Init>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//==================================================== adjusting tasks========================================================================//


	t1.piriority = 3 ;
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <main+0x98>)
 80022ca:	2203      	movs	r2, #3
 80022cc:	711a      	strb	r2, [r3, #4]
	t1.ptr_to_task = task1_fun;
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <main+0x98>)
 80022d0:	4a20      	ldr	r2, [pc, #128]	; (8002354 <main+0x9c>)
 80022d2:	609a      	str	r2, [r3, #8]
	t1.stack_size = 1024 ;
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <main+0x98>)
 80022d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022da:	601a      	str	r2, [r3, #0]
	strcpy(t1.task_name , "task 1 ");
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <main+0xa0>)
 80022de:	4a1f      	ldr	r2, [pc, #124]	; (800235c <main+0xa4>)
 80022e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022e4:	e883 0003 	stmia.w	r3, {r0, r1}
	Nabil_Rtos_Create_Task(&t1);
 80022e8:	4819      	ldr	r0, [pc, #100]	; (8002350 <main+0x98>)
 80022ea:	f7fe fbdf 	bl	8000aac <Nabil_Rtos_Create_Task>
	t2.piriority = 3 ;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <main+0xa8>)
 80022f0:	2203      	movs	r2, #3
 80022f2:	711a      	strb	r2, [r3, #4]
	t2.ptr_to_task = task2_fun;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <main+0xa8>)
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <main+0xac>)
 80022f8:	609a      	str	r2, [r3, #8]
	t2.stack_size = 1024 ;
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <main+0xa8>)
 80022fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002300:	601a      	str	r2, [r3, #0]
	strcpy(t2.task_name , "task 2 ");
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <main+0xb0>)
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <main+0xb4>)
 8002306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800230a:	e883 0003 	stmia.w	r3, {r0, r1}
	Nabil_Rtos_Create_Task(&t2);
 800230e:	4814      	ldr	r0, [pc, #80]	; (8002360 <main+0xa8>)
 8002310:	f7fe fbcc 	bl	8000aac <Nabil_Rtos_Create_Task>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//==================================================== adjusting Mutex========================================================================//

	m1.current_handler = NULL;
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <main+0xb8>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
	m1.next_handler = Null;
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <main+0xb8>)
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]
	m1.payload = mail_box;
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <main+0xb8>)
 8002322:	4a14      	ldr	r2, [pc, #80]	; (8002374 <main+0xbc>)
 8002324:	601a      	str	r2, [r3, #0]
	m1.paylaod_size = 8;
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <main+0xb8>)
 8002328:	2208      	movs	r2, #8
 800232a:	605a      	str	r2, [r3, #4]
	strcpy(m1.mutex_name , "mutex shared between t1 - t2");
 800232c:	4a12      	ldr	r2, [pc, #72]	; (8002378 <main+0xc0>)
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <main+0xc4>)
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
 8002334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002338:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800233c:	c407      	stmia	r4!, {r0, r1, r2}
 800233e:	7023      	strb	r3, [r4, #0]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//==================================================== starting OS========================================================================//

	Nabil_Activate_task(&t1);
 8002340:	4803      	ldr	r0, [pc, #12]	; (8002350 <main+0x98>)
 8002342:	f7fe fbf7 	bl	8000b34 <Nabil_Activate_task>
	OS_Start();
 8002346:	f7fe fc15 	bl	8000b74 <OS_Start>
 800234a:	2300      	movs	r3, #0
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
 800234c:	4618      	mov	r0, r3
 800234e:	bdb0      	pop	{r4, r5, r7, pc}
 8002350:	200005b4 	.word	0x200005b4
 8002354:	08001e69 	.word	0x08001e69
 8002358:	200005cc 	.word	0x200005cc
 800235c:	080026d4 	.word	0x080026d4
 8002360:	20000510 	.word	0x20000510
 8002364:	08001fe1 	.word	0x08001fe1
 8002368:	20000528 	.word	0x20000528
 800236c:	080026dc 	.word	0x080026dc
 8002370:	20000604 	.word	0x20000604
 8002374:	20000090 	.word	0x20000090
 8002378:	20000614 	.word	0x20000614
 800237c:	080026e4 	.word	0x080026e4

08002380 <North_Pb_IRQ>:



void North_Pb_IRQ(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
	push_button_interrupt_soure = north;
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <North_Pb_IRQ+0x20>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
	number_of_active_requests++;
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <North_Pb_IRQ+0x24>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <North_Pb_IRQ+0x24>)
 8002396:	701a      	strb	r2, [r3, #0]

}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	200005b0 	.word	0x200005b0
 80023a4:	200000d0 	.word	0x200000d0

080023a8 <South_Pb_IRQ>:
void South_Pb_IRQ(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
	push_button_interrupt_soure = south;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <South_Pb_IRQ+0x20>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
	number_of_active_requests++;
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <South_Pb_IRQ+0x24>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <South_Pb_IRQ+0x24>)
 80023be:	701a      	strb	r2, [r3, #0]

}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	200005b0 	.word	0x200005b0
 80023cc:	200000d0 	.word	0x200000d0

080023d0 <East_Pb_IRQ>:
void East_Pb_IRQ(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
	push_button_interrupt_soure = east;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <East_Pb_IRQ+0x20>)
 80023d6:	2202      	movs	r2, #2
 80023d8:	701a      	strb	r2, [r3, #0]
	number_of_active_requests++;
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <East_Pb_IRQ+0x24>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <East_Pb_IRQ+0x24>)
 80023e6:	701a      	strb	r2, [r3, #0]

}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	200005b0 	.word	0x200005b0
 80023f4:	200000d0 	.word	0x200000d0

080023f8 <West_Pb_IRQ>:
void West_Pb_IRQ(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
	push_button_interrupt_soure = west;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <West_Pb_IRQ+0x20>)
 80023fe:	2203      	movs	r2, #3
 8002400:	701a      	strb	r2, [r3, #0]
	number_of_active_requests++;
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <West_Pb_IRQ+0x24>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <West_Pb_IRQ+0x24>)
 800240e:	701a      	strb	r2, [r3, #0]

}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	200005b0 	.word	0x200005b0
 800241c:	200000d0 	.word	0x200000d0

08002420 <traffic_light_init>:
#include "traffic_light.h"
Traffic_light_status current_status;

void traffic_light_init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0


	// set GPIO portA pins from p0 - p5 as output pushpull to control traffic lights
	GPIO_CONFIG_t traffic_light_pins;
	traffic_light_pins.Pin_Number = North_South_Green ;
 8002426:	2301      	movs	r3, #1
 8002428:	80bb      	strh	r3, [r7, #4]
	traffic_light_pins.Output_Pin_Speed = low_speed_2Mhz ;
 800242a:	2302      	movs	r3, #2
 800242c:	71fb      	strb	r3, [r7, #7]
	traffic_light_pins.Pin_Mode = GPIO_MODE_General_purpose_output_push_pull;
 800242e:	2302      	movs	r3, #2
 8002430:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &traffic_light_pins);
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4830      	ldr	r0, [pc, #192]	; (80024f8 <traffic_light_init+0xd8>)
 8002438:	f7ff f94a 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = North_South_Yellow ;
 800243c:	2302      	movs	r3, #2
 800243e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &traffic_light_pins);
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	4619      	mov	r1, r3
 8002444:	482c      	ldr	r0, [pc, #176]	; (80024f8 <traffic_light_init+0xd8>)
 8002446:	f7ff f943 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = North_South_Red ;
 800244a:	2304      	movs	r3, #4
 800244c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &traffic_light_pins);
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	4619      	mov	r1, r3
 8002452:	4829      	ldr	r0, [pc, #164]	; (80024f8 <traffic_light_init+0xd8>)
 8002454:	f7ff f93c 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = East_West_Green ;
 8002458:	2308      	movs	r3, #8
 800245a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &traffic_light_pins);
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	4619      	mov	r1, r3
 8002460:	4825      	ldr	r0, [pc, #148]	; (80024f8 <traffic_light_init+0xd8>)
 8002462:	f7ff f935 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = East_West_Yellow ;
 8002466:	2310      	movs	r3, #16
 8002468:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &traffic_light_pins);
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	4619      	mov	r1, r3
 800246e:	4822      	ldr	r0, [pc, #136]	; (80024f8 <traffic_light_init+0xd8>)
 8002470:	f7ff f92e 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = East_West_Red ;
 8002474:	2320      	movs	r3, #32
 8002476:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &traffic_light_pins);
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	4619      	mov	r1, r3
 800247c:	481e      	ldr	r0, [pc, #120]	; (80024f8 <traffic_light_init+0xd8>)
 800247e:	f7ff f927 	bl	80016d0 <MCAL_GPIO_Init>


	//set all LEDs to zero initially
	Traffic_light_port = 0b000000;
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <traffic_light_init+0xdc>)
 8002484:	7813      	ldrb	r3, [r2, #0]
 8002486:	f36f 0305 	bfc	r3, #0, #6
 800248a:	7013      	strb	r3, [r2, #0]


	// set GPIO portB pins from p8 - p13 as floating input to test the leds
	traffic_light_pins.Pin_Number = North_South_Green_led_test;
 800248c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002490:	80bb      	strh	r3, [r7, #4]
	traffic_light_pins.Pin_Mode = GPIO_MODE_Floating_input;
 8002492:	2304      	movs	r3, #4
 8002494:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &traffic_light_pins);
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4819      	ldr	r0, [pc, #100]	; (8002500 <traffic_light_init+0xe0>)
 800249c:	f7ff f918 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = North_South_Yellow_led_test;
 80024a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &traffic_light_pins);
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	4815      	ldr	r0, [pc, #84]	; (8002500 <traffic_light_init+0xe0>)
 80024ac:	f7ff f910 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = North_South_Red_led_test;
 80024b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &traffic_light_pins);
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4811      	ldr	r0, [pc, #68]	; (8002500 <traffic_light_init+0xe0>)
 80024bc:	f7ff f908 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = East_West_Green_led_test;
 80024c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024c4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &traffic_light_pins);
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	480d      	ldr	r0, [pc, #52]	; (8002500 <traffic_light_init+0xe0>)
 80024cc:	f7ff f900 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = East_West_Yellow_led_test;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &traffic_light_pins);
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4809      	ldr	r0, [pc, #36]	; (8002500 <traffic_light_init+0xe0>)
 80024dc:	f7ff f8f8 	bl	80016d0 <MCAL_GPIO_Init>
	traffic_light_pins.Pin_Number = East_West_Red_led_test;
 80024e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &traffic_light_pins);
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <traffic_light_init+0xe0>)
 80024ec:	f7ff f8f0 	bl	80016d0 <MCAL_GPIO_Init>

}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40010800 	.word	0x40010800
 80024fc:	4001080c 	.word	0x4001080c
 8002500:	40010c00 	.word	0x40010c00

08002504 <traffic_light_update>:
void traffic_light_update(enum active_led x)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
	switch(x)
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d84e      	bhi.n	80025b2 <traffic_light_update+0xae>
 8002514:	a201      	add	r2, pc, #4	; (adr r2, 800251c <traffic_light_update+0x18>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	08002531 	.word	0x08002531
 8002520:	0800254b 	.word	0x0800254b
 8002524:	08002565 	.word	0x08002565
 8002528:	0800257f 	.word	0x0800257f
 800252c:	08002599 	.word	0x08002599
	{
	case North_south_green_on :
		Traffic_light_port = 0b100001;
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <traffic_light_update+0xb8>)
 8002532:	7813      	ldrb	r3, [r2, #0]
 8002534:	2121      	movs	r1, #33	; 0x21
 8002536:	f361 0305 	bfi	r3, r1, #0, #6
 800253a:	7013      	strb	r3, [r2, #0]
		current_status.leds_status = North_south_green_on;
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <traffic_light_update+0xbc>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
		current_status.remaining_time = 20;                         //set 20 seconds for green light
 8002542:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <traffic_light_update+0xbc>)
 8002544:	2214      	movs	r2, #20
 8002546:	705a      	strb	r2, [r3, #1]
		break ;
 8002548:	e033      	b.n	80025b2 <traffic_light_update+0xae>
	case North_south_yellow_on :
		Traffic_light_port = 0b100010;
 800254a:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <traffic_light_update+0xb8>)
 800254c:	7813      	ldrb	r3, [r2, #0]
 800254e:	2122      	movs	r1, #34	; 0x22
 8002550:	f361 0305 	bfi	r3, r1, #0, #6
 8002554:	7013      	strb	r3, [r2, #0]
		current_status.leds_status = North_south_yellow_on;
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <traffic_light_update+0xbc>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
		current_status.remaining_time = 5;                         //set 5 seconds for yellow light
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <traffic_light_update+0xbc>)
 800255e:	2205      	movs	r2, #5
 8002560:	705a      	strb	r2, [r3, #1]
		break ;
 8002562:	e026      	b.n	80025b2 <traffic_light_update+0xae>

	case East_west_green_on :
		Traffic_light_port = 0b001100;
 8002564:	4a15      	ldr	r2, [pc, #84]	; (80025bc <traffic_light_update+0xb8>)
 8002566:	7813      	ldrb	r3, [r2, #0]
 8002568:	210c      	movs	r1, #12
 800256a:	f361 0305 	bfi	r3, r1, #0, #6
 800256e:	7013      	strb	r3, [r2, #0]
		current_status.leds_status = East_west_green_on;
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <traffic_light_update+0xbc>)
 8002572:	2202      	movs	r2, #2
 8002574:	701a      	strb	r2, [r3, #0]
		current_status.remaining_time = 20;                         //set 20 seconds for green light
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <traffic_light_update+0xbc>)
 8002578:	2214      	movs	r2, #20
 800257a:	705a      	strb	r2, [r3, #1]
		break ;
 800257c:	e019      	b.n	80025b2 <traffic_light_update+0xae>

	case East_west_yellow_on :
		Traffic_light_port = 0b010100;
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <traffic_light_update+0xb8>)
 8002580:	7813      	ldrb	r3, [r2, #0]
 8002582:	2114      	movs	r1, #20
 8002584:	f361 0305 	bfi	r3, r1, #0, #6
 8002588:	7013      	strb	r3, [r2, #0]
		current_status.leds_status = East_west_yellow_on;
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <traffic_light_update+0xbc>)
 800258c:	2203      	movs	r2, #3
 800258e:	701a      	strb	r2, [r3, #0]
		current_status.remaining_time = 5;                         //set 5 seconds for yellow light
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <traffic_light_update+0xbc>)
 8002592:	2205      	movs	r2, #5
 8002594:	705a      	strb	r2, [r3, #1]
		break ;
 8002596:	e00c      	b.n	80025b2 <traffic_light_update+0xae>
	case North_South_East_West_Red_on :
		Traffic_light_port = 0b100100;
 8002598:	4a08      	ldr	r2, [pc, #32]	; (80025bc <traffic_light_update+0xb8>)
 800259a:	7813      	ldrb	r3, [r2, #0]
 800259c:	2124      	movs	r1, #36	; 0x24
 800259e:	f361 0305 	bfi	r3, r1, #0, #6
 80025a2:	7013      	strb	r3, [r2, #0]
				current_status.leds_status = East_west_yellow_on;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <traffic_light_update+0xbc>)
 80025a6:	2203      	movs	r2, #3
 80025a8:	701a      	strb	r2, [r3, #0]
				current_status.remaining_time = 5;                         //set 5 seconds for yellow light
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <traffic_light_update+0xbc>)
 80025ac:	2205      	movs	r2, #5
 80025ae:	705a      	strb	r2, [r3, #1]
				break ;
 80025b0:	bf00      	nop
	}
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	4001080c 	.word	0x4001080c
 80025c0:	2000063c 	.word	0x2000063c

080025c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025c4:	480d      	ldr	r0, [pc, #52]	; (80025fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80025c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ce:	490d      	ldr	r1, [pc, #52]	; (8002604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025d0:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <LoopForever+0xe>)
  movs r3, #0
 80025d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d4:	e002      	b.n	80025dc <LoopCopyDataInit>

080025d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025da:	3304      	adds	r3, #4

080025dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e0:	d3f9      	bcc.n	80025d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <LoopForever+0x12>)
  ldr r4, =_ebss
 80025e4:	4c0a      	ldr	r4, [pc, #40]	; (8002610 <LoopForever+0x16>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e8:	e001      	b.n	80025ee <LoopFillZerobss>

080025ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ec:	3204      	adds	r2, #4

080025ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f0:	d3fb      	bcc.n	80025ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025f2:	f000 f811 	bl	8002618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025f6:	f7ff fe5f 	bl	80022b8 <main>

080025fa <LoopForever>:

LoopForever:
    b LoopForever
 80025fa:	e7fe      	b.n	80025fa <LoopForever>
  ldr   r0, =_estack
 80025fc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002604:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002608:	0800270c 	.word	0x0800270c
  ldr r2, =_sbss
 800260c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002610:	20000640 	.word	0x20000640

08002614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC1_2_IRQHandler>
	...

08002618 <__libc_init_array>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	2500      	movs	r5, #0
 800261c:	4e0c      	ldr	r6, [pc, #48]	; (8002650 <__libc_init_array+0x38>)
 800261e:	4c0d      	ldr	r4, [pc, #52]	; (8002654 <__libc_init_array+0x3c>)
 8002620:	1ba4      	subs	r4, r4, r6
 8002622:	10a4      	asrs	r4, r4, #2
 8002624:	42a5      	cmp	r5, r4
 8002626:	d109      	bne.n	800263c <__libc_init_array+0x24>
 8002628:	f000 f81a 	bl	8002660 <_init>
 800262c:	2500      	movs	r5, #0
 800262e:	4e0a      	ldr	r6, [pc, #40]	; (8002658 <__libc_init_array+0x40>)
 8002630:	4c0a      	ldr	r4, [pc, #40]	; (800265c <__libc_init_array+0x44>)
 8002632:	1ba4      	subs	r4, r4, r6
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	42a5      	cmp	r5, r4
 8002638:	d105      	bne.n	8002646 <__libc_init_array+0x2e>
 800263a:	bd70      	pop	{r4, r5, r6, pc}
 800263c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002640:	4798      	blx	r3
 8002642:	3501      	adds	r5, #1
 8002644:	e7ee      	b.n	8002624 <__libc_init_array+0xc>
 8002646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800264a:	4798      	blx	r3
 800264c:	3501      	adds	r5, #1
 800264e:	e7f2      	b.n	8002636 <__libc_init_array+0x1e>
 8002650:	08002704 	.word	0x08002704
 8002654:	08002704 	.word	0x08002704
 8002658:	08002704 	.word	0x08002704
 800265c:	08002708 	.word	0x08002708

08002660 <_init>:
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	bf00      	nop
 8002664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002666:	bc08      	pop	{r3}
 8002668:	469e      	mov	lr, r3
 800266a:	4770      	bx	lr

0800266c <_fini>:
 800266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266e:	bf00      	nop
 8002670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002672:	bc08      	pop	{r3}
 8002674:	469e      	mov	lr, r3
 8002676:	4770      	bx	lr
